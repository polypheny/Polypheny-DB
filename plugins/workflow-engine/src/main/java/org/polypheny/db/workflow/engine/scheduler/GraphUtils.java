/*
 * Copyright 2019-2024 The Polypheny Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.polypheny.db.workflow.engine.scheduler;

import java.util.Collection;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import org.polypheny.db.util.graph.AttributedDirectedGraph;
import org.polypheny.db.util.graph.AttributedDirectedGraph.AttributedEdgeFactory;
import org.polypheny.db.util.graph.DefaultEdge;

public class GraphUtils {

    public static <V, E extends DefaultEdge> V findInvertedTreeRoot( AttributedDirectedGraph<V, E> tree ) {
        V root = null;
        for ( V vertex : tree.vertexSet() ) {
            if ( tree.getOutwardEdges( vertex ).isEmpty() ) {
                root = vertex;
                break;
            }
        }

        // since we assume no loops and the execTree contains at least 1 node, there must be a root
        Objects.requireNonNull( root );
        return root;
    }


    /**
     * Returns the subgraph of the specified graph induced by the specified nodes.
     * The nodes of the resulting subgraph are the same objects as those in the original graph.
     * The edges of the subgraph are generated by supplying the AttributedEdgeFactory with
     * the edge in the original graph as attribute.
     *
     * @param graph the original graph
     * @param nodes the nodes that induce a subgraph of graph. Nodes that do not exist in graph are ignored.
     * @return the subgraph of graph induced by nodes
     */
    public static <V, E extends DefaultEdge> AttributedDirectedGraph<V, E> getInducedSubgraph( AttributedDirectedGraph<V, E> graph, Collection<V> nodes ) {
        AttributedDirectedGraph<V, E> subgraph = AttributedDirectedGraph.create( (AttributedEdgeFactory<V, E>) graph.getEdgeFactory() );
        Set<V> vertexSet = graph.vertexSet();
        for ( V n : nodes ) {
            if ( vertexSet.contains( n ) ) {
                subgraph.addVertex( n );
            }
        }

        vertexSet = subgraph.vertexSet();
        Set<E> insertedEdges = new HashSet<>();
        for ( V source : vertexSet ) {
            for ( E edge : graph.getOutwardEdges( source ) ) {
                if ( insertedEdges.contains( edge ) ) {
                    continue;
                }
                @SuppressWarnings("unchecked")
                V target = (V) edge.target;
                if ( vertexSet.contains( target ) ) {
                    subgraph.addEdge( source, target, edge );
                    insertedEdges.add( edge );
                }
            }
        }

        return subgraph;
    }

}
