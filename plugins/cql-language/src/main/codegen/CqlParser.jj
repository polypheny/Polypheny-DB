options {
    STATIC = false;
    IGNORE_CASE = true;
}

PARSER_BEGIN( CqlParser )

package org.polypheny.db.cql.parser;

import java.io.BufferedReader;
import java.io.StringReader;
import java.util.Map;
import java.util.TreeMap;

import lombok.extern.slf4j.Slf4j;
import org.polypheny.db.cql.BooleanGroup.FieldOpsBooleanOperator;
import org.polypheny.db.cql.BooleanGroup.EntityOpsBooleanOperator;
import org.polypheny.db.cql.BooleanGroup;
import org.polypheny.db.cql.ColumnFilter;
import org.polypheny.db.cql.FieldIndex;
import org.polypheny.db.cql.Comparator;
import org.polypheny.db.cql.CqlQuery;
import org.polypheny.db.cql.CqlQueryBuilder;
import org.polypheny.db.cql.Filter;
import org.polypheny.db.cql.LiteralFilter;
import org.polypheny.db.cql.Modifier;
import org.polypheny.db.cql.Relation;
import org.polypheny.db.cql.EntityIndex;
import org.polypheny.db.cql.exception.InvalidMethodInvocation;
import org.polypheny.db.cql.exception.InvalidModifierException;
import org.polypheny.db.cql.exception.UnknownIndexException;


@Slf4j
public class  CqlParser {

    private CqlQueryBuilder cqlQueryBuilder;

    public CqlParser( String cqlQueryStr, String namespaceName ) {
        this( new BufferedReader( new StringReader( cqlQueryStr ) ) );
        this.cqlQueryBuilder = new CqlQueryBuilder( namespaceName );
    }

}

PARSER_END( CqlParser )

< DEFAULT > SKIP : { " " | "\t" | "\n" | "\r" | "\f" }

TOKEN : { < RELATION : "relation" > }
TOKEN : { < SORT_BY : "sortby" > }
TOKEN : { < PROJECT : "project" > }
TOKEN : { < ALIAS_OPERATOR : "as" > }

TOKEN : { < BOOLEAN_AND : "and" | "\"and\"" > }
TOKEN : { < BOOLEAN_OR : "or" | "\"or\"" > }
TOKEN : { < BOOLEAN_NOT : "not" | "\"not\"" > }
TOKEN : { < BOOLEAN_PROX : "prox" | "\"prox\"" > }

TOKEN : { < COMPARATOR_SERVER_CHOICE : "=" > }
TOKEN : { < COMPARATOR_EQUALS : "==" > }
TOKEN : { < COMPARATOR_NOT_EQUALS : "<>" > }
TOKEN : { < COMPARATOR_GREATER_THAN : ">" > }
TOKEN : { < COMPARATOR_LESS_THAN : "<" > }
TOKEN : { < COMPARATOR_GREATER_THAN_OR_EQUALS : ">=" > }
TOKEN : { < COMPARATOR_LESS_THAN_OR_EQUALS : "<=" > }

TOKEN : { < TABLE_NAME : ( [ "A"-"Z", "a"-"z", "_", "0"-"9" ] )+"."( [ "A"-"Z", "a"-"z", "_", "0"-"9" ] )+ > }
TOKEN : { < COLUMN_NAME : ( [ "A"-"Z", "a"-"z", "_", "0"-"9" ] )+"."( [ "A"-"Z", "a"-"z", "_", "0"-"9" ] )+"."( [ "A"-"Z", "a"-"z", "_", "0"-"9" ] )+ > }

TOKEN : { < STRING_WITHOUT_DOUBLE_QUOTES : ( ~[ " ", "\t", "\n", "\r", "\f", "(", ")", "\"", "=", "<", ">", "/" ] )+ > }
TOKEN : {
    < STRING_WITH_DOUBLE_QUOTES :
        "\""
        (
             "\\" ~[]
        |
            ~["\"","\\"]
        )*
        "\"" >
}

TOKEN : { < COMPARATOR_NAMED : ( [ "A"-"Z", "a"-"z" ] )+ > }
TOKEN : { < ALIAS : ( [ "A"-"Z", "a"-"z" ] )+ > }

CqlQuery parse() :
{
}
{
    { log.debug( "Parsing started." ); }
    [
//        Logging here to prevent multiple logs, since QUERY_FILTERS is recursive.
        { log.debug( "Query Filters parsing started." ); }
        QUERY_FILTERS()
        { log.debug( "Query Filters parsing completed." ); }
    ]
    [
        QUERY_RELATION()
    ]
    [
        SORTING()
    ]
    [
        PROJECT()
    ]
    < EOF >
    { log.debug( "Parsing completed." ); }
    {
        try {
            return cqlQueryBuilder.build();
        } catch ( Exception e ) {
            throw new Error( e.getMessage() );
        }
    }
}

void QUERY_RELATION() :
{
    EntityIndex entityIndex = null;
    BooleanGroup<EntityOpsBooleanOperator> tableOpsBooleanGroup = null;
}
{
    < RELATION >
    { log.debug( "Query Relation parsing started." ); }
    entityIndex = TABLE_INDEX()
    {
        cqlQueryBuilder.addEntity( entityIndex );
    }
    (
        LOOKAHEAD( 2 )
        tableOpsBooleanGroup = TABLE_OPS_BOOLEAN_GROUP()
        entityIndex = TABLE_INDEX()
        {
            try {
                cqlQueryBuilder.combineRelationWith( entityIndex, tableOpsBooleanGroup );
            } catch ( InvalidModifierException e ) {
                throw new Error( e.getMessage() );
            }
        }
    )*
    { log.debug( "Query Relation parsing completed." ); }
}

void QUERY_FILTERS() :
{
    BooleanGroup<FieldOpsBooleanOperator> columnOpsBooleanGroup = null;
}
{
    SEARCH_CLAUSE()
    [
        columnOpsBooleanGroup = COLUMN_OPS_BOOLEAN_GROUP()
        SEARCH_CLAUSE()
        {
            cqlQueryBuilder.mergeFilterSubtreesWith( columnOpsBooleanGroup );
        }
    ]
}

void SEARCH_CLAUSE() :
{
    Filter filter = null;
    FieldIndex left = null;
    Relation relation = null;
    FieldIndex rightFieldIndex = null;
    String rightSearchTerm = null;
}
{
    "("
    QUERY_FILTERS()
    ")"
|
    left = COLUMN_INDEX()
    relation = RELATION()
    (
        LOOKAHEAD( 2 )
        rightFieldIndex = COLUMN_INDEX()
        {
            filter = new ColumnFilter( left, relation, rightFieldIndex );
        }
    |
        rightSearchTerm = IDENTIFIER()
        {
            filter = new LiteralFilter( left, relation, rightSearchTerm );
        }
    )
    {
        cqlQueryBuilder.addNewFilter( filter );
    }
}

void SORTING() :
{
    FieldIndex fieldIndex = null;
    Map<String, Modifier> modifiers = null;
}
{
    < SORT_BY >
    { log.debug( "Sort Specification parsing started." ); }
    (
        fieldIndex = COLUMN_INDEX()
        [
            modifiers = MODIFIERS()
        ]
        {
            cqlQueryBuilder.addSortSpecification( fieldIndex, modifiers );
            modifiers = null;
        }
    )+
    { log.debug( "Sort Specification parsing completed." ); }
}

void PROJECT() :
{
    FieldIndex fieldIndex = null;
    Map<String, Modifier> modifiers = null;
}
{
    < PROJECT >
    { log.debug( "Projection specification parsing started." ); }
    (
        fieldIndex = COLUMN_INDEX()
        [
            modifiers = MODIFIERS()
        ]
        {
            if ( modifiers == null ) {
                modifiers = new TreeMap<String, Modifier>( String.CASE_INSENSITIVE_ORDER );
            }
            cqlQueryBuilder.addProjection( fieldIndex, modifiers );
            modifiers = null;
        }
    )+
    { log.debug( "Projection specification parsing completed." ); }
}

EntityIndex TABLE_INDEX() :
{
    EntityIndex entityIndex = null;
    Token tableToken = null;
    Token aliasToken = null;
}
{
    tableToken = < TABLE_NAME >
    [
        < ALIAS_OPERATOR >
        aliasToken = < ALIAS >
    ]
    {
        try {
            entityIndex = cqlQueryBuilder.addEntityIndex( tableToken.image );
        } catch ( UnknownIndexException e ) {
            throw new Error( e.getMessage() );
        }
        return entityIndex;
    }
}

FieldIndex COLUMN_INDEX() :
{
    FieldIndex fieldIndex = null;
    Token columnToken = null;
}
{
    columnToken = < COLUMN_NAME >
    {
        try {
            fieldIndex = cqlQueryBuilder.addFieldIndex( columnToken.image );
        } catch ( UnknownIndexException e ) {
            throw new Error( e.getMessage() );
        }
        return fieldIndex;
    }
}

BooleanGroup<EntityOpsBooleanOperator> TABLE_OPS_BOOLEAN_GROUP() :
{
    BooleanGroup<EntityOpsBooleanOperator> booleanGroup = null;
    EntityOpsBooleanOperator entityOpsBooleanOperator = null;
    Map<String, Modifier> modifiers = null;
}
{
    entityOpsBooleanOperator = TABLE_OPS_BOOLEAN_OPERATOR()
    [
        modifiers = MODIFIERS()
        {
            booleanGroup = new BooleanGroup<EntityOpsBooleanOperator>( entityOpsBooleanOperator, modifiers );
        }
    ]
    {
        if ( modifiers == null ) {
            booleanGroup = new BooleanGroup<EntityOpsBooleanOperator>( entityOpsBooleanOperator );
        }
        return booleanGroup;
    }
}

BooleanGroup<FieldOpsBooleanOperator> COLUMN_OPS_BOOLEAN_GROUP() :
{
    BooleanGroup<FieldOpsBooleanOperator> booleanGroup = null;
    FieldOpsBooleanOperator fieldOpsBooleanOperator = null;
    Map<String, Modifier> modifiers = null;
}
{
    fieldOpsBooleanOperator = COLUMN_OPS_BOOLEAN_OPERATOR()
    [
        modifiers = MODIFIERS()
        {
            booleanGroup = new BooleanGroup<FieldOpsBooleanOperator>( fieldOpsBooleanOperator, modifiers );
        }
    ]
    {
        if ( modifiers == null ) {
            booleanGroup = new BooleanGroup<FieldOpsBooleanOperator>( fieldOpsBooleanOperator );
        }
        return booleanGroup;
    }
}

Relation RELATION() :
{
    Relation relation = null;
    Comparator comparator = null;
    Map<String, Modifier> modifiers = null;
}
{
    comparator = COMPARATOR()
    [
        modifiers = MODIFIERS()
    ]
    {
        if ( modifiers == null ) {
            relation = new Relation( comparator );
        } else {
            relation = new Relation( comparator, modifiers );
        }
        return relation;
    }
}

Map<String, Modifier> MODIFIERS() :
{
    Map<String, Modifier> modifiers = new TreeMap<String, Modifier>( String.CASE_INSENSITIVE_ORDER );
    Modifier modifier = null;
}
{
    modifier = MODIFIER()
    { modifiers.put( modifier.modifierName, modifier ); }
    (
        modifier = MODIFIER()
        { modifiers.put( modifier.modifierName, modifier ); }
    )*
    {
        return modifiers;
    }
}

Modifier MODIFIER() :
{
    Modifier modifier = null;
    Token modifierNameToken = null;
    String modifierValue = null;
    Comparator comparator = null;
}
{
    "/"
    modifierNameToken = < STRING_WITHOUT_DOUBLE_QUOTES >
    [
        LOOKAHEAD( 2 )
        comparator = COMPARATOR()
        modifierValue = IDENTIFIER()
        {
            modifier = new Modifier( modifierNameToken.image, comparator, modifierValue );
        }
    ]
    {
        if ( modifier == null ) {
            modifier = new Modifier( modifierNameToken.image );
        }
        return modifier;
    }
}

String IDENTIFIER() :
{
    Token t = null;
    String identifier = null;
}
{
    (
        t = < STRING_WITHOUT_DOUBLE_QUOTES >
        {
            identifier = t.image;
        }
    |
        t = < STRING_WITH_DOUBLE_QUOTES >
        {
            String str = t.image;
            str = str.substring( 1, str.length() - 1 );
            str = str.replace( "\\\"", "\"" );
            identifier = str;
        }
    )
    { return identifier; }
}

EntityOpsBooleanOperator TABLE_OPS_BOOLEAN_OPERATOR() :
{
    EntityOpsBooleanOperator entityOpsBooleanOperator = null;
}
{
    (
        < BOOLEAN_AND >
        { entityOpsBooleanOperator = EntityOpsBooleanOperator.AND; }
    |
        < BOOLEAN_OR >
        { entityOpsBooleanOperator = EntityOpsBooleanOperator.OR; }
    )
    { return entityOpsBooleanOperator; }
}

FieldOpsBooleanOperator COLUMN_OPS_BOOLEAN_OPERATOR() :
{
    FieldOpsBooleanOperator fieldOpsBooleanOperator = null;
}
{
    (
        < BOOLEAN_AND >
        { fieldOpsBooleanOperator = FieldOpsBooleanOperator.AND; }
    |
        < BOOLEAN_OR >
        { fieldOpsBooleanOperator = FieldOpsBooleanOperator.OR; }
    |
        < BOOLEAN_NOT >
        { fieldOpsBooleanOperator = FieldOpsBooleanOperator.NOT; }
    |
        < BOOLEAN_PROX >
        { fieldOpsBooleanOperator = FieldOpsBooleanOperator.PROX; }
    )
    {
        return fieldOpsBooleanOperator;
    }
}

Comparator COMPARATOR() :
{
    Token namedComparator = null;
    Comparator comparator = null;
}
{
    (
        < COMPARATOR_SERVER_CHOICE >
        { comparator = Comparator.SERVER_CHOICE; }
    |
        < COMPARATOR_EQUALS >
        { comparator = Comparator.EQUALS; }
    |
        < COMPARATOR_NOT_EQUALS >
        { comparator = Comparator.NOT_EQUALS; }
    |
        < COMPARATOR_GREATER_THAN >
        { comparator = Comparator.GREATER_THAN; }
    |
        < COMPARATOR_LESS_THAN >
        { comparator = Comparator.LESS_THAN; }
    |
        < COMPARATOR_GREATER_THAN_OR_EQUALS >
        { comparator = Comparator.GREATER_THAN_OR_EQUALS; }
    |
        < COMPARATOR_LESS_THAN_OR_EQUALS >
        { comparator = Comparator.LESS_THAN_OR_EQUALS; }
    |
        namedComparator = < COMPARATOR_NAMED >
        { comparator = Comparator.createNamedComparator( namedComparator.image ); }
    )
    {
        return comparator;
    }
}
