group "org.polypheny"

configurations {
    tests {
        extendsFrom testRuntimeOnly
    }
}

dependencies {
    compileOnly project(":core")
    compileOnly project(":plugins:sql-language")
    compileOnly project(":dbms")

    implementation project(":webui") // We need GraphResult class

    implementation group: "org.neo4j.driver", name: "neo4j-java-driver", version: neo4j_version // Apache 2.0


    // --- Test Compile ---
    testImplementation project(path: ":dbms", configuration: "test")
    testImplementation project(path: ":dbms")
    testImplementation project(path: ":core", configuration: "tests")
    testImplementation project(path: ":core")

    testImplementation group: "com.google.protobuf", name: "protobuf-java", version: protobuf_version // BSD 3-clause

    testImplementation(group: "org.polypheny", name: "polypheny-jdbc-driver", version: polypheny_jdbc_driver_version) {
        exclude(group: "com.fasterxml.jackson.core")
        exclude(group: "com.fasterxml.jackson.databind")
    }
    testImplementation group: "com.konghq", name: "unirest-java", version: unirest_version // MIT
    testRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit_jupiter_version)

}


sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            destinationDirectory.set(file(project.buildDir.absolutePath + "/test-classes"))
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}

compileJava {
    dependsOn(":config:processResources")
    dependsOn(":core:processResources")
    dependsOn(":information:processResources")
    dependsOn(":plugins:sql-language:processResources")
}

delombok {
    dependsOn(":plugins:sql-language:processResources")
}

test.dependsOn(":dbms:shadowJar")


/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Version": "$project.version"
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
}
task testJar(type: Jar, dependsOn: testClasses) {
    archiveClassifier = 'tests'
    from sourceSets.test.output
}
artifacts {
    //archives jar // regular jar containing only the compiled source
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files
    tests testJar // jar file containing the test classes
}


// due to gradle 7.6+
configurations {
    testClasses {
        extendsFrom(testImplementation)
    }
}
artifacts {
    // due to gradle 7.6+
    testClasses testJar
}

licensee {
    allow('Apache-2.0')
    allow('MIT-0')
    allow('MIT')
}
