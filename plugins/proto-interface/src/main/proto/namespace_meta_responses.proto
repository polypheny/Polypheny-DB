/*
Messages related to describing the metadata of namespaces and their entities.
*/

syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.polypheny.prism";
option java_outer_classname = "NamespaceMetaResponses";

package polypheny.prism;

/*
The NamespacesResponse message delivers a list of namespaces based on the provided criteria in the NamespacesRequest.
*/
message NamespacesResponse {
  // A list of Namespace messages containing information about each namespace that matches the search criteria.
  repeated Namespace namespaces = 1;
}

/*
The EntitiesResponse message returns a list of entities that match the provided criteria from the EntitiesRequest.
*/
message EntitiesResponse {
  // A list of Entity messages containing information about each entity within the requested namespace.
  repeated Entity entities = 1;
}

/*
The Namespace message provides detailed information about a specific namespace.
*/
message Namespace {
  // The name of the namespace.
  string namespace_name = 1;
  // Indicates if the namespace name is case sensitive.
  bool is_case_sensitive = 4;
  // An optional field providing the type of the namespace, if applicable.
  optional string namespace_type = 5;
}

/*
The Entity message acts as a generic wrapper for different of entities metadata messages.
Only one of the entities metadata fields can be set for a given message instance.
Different entity metadata messages are used to represent the metadata of different entity types.
The available entity metadata messages are, Table for relational entities, Graph for labeled property graph entities and
Document for entities in the document model.
*/
message Entity {
  oneof Entity {
    // An entity of type Table.
    Table table = 1;
    // An entity of type Graph.
    Graph graph = 2;
    // An entity of type Document.
    Document document= 3;
    // add other entities known in other models
  }
}

/*
The Table message provides comprehensive information about a specific table within a database.
*/
message Table {
  // The namespace or schema where the table is located.
  string namespace_name = 2;
  // The name of the table.
  string table_name = 3;
  // The type of the table (e.g., BASE TABLE, VIEW).
  string table_type = 4;
  // A list of Column messages providing information about each column in the table.
  repeated Column columns = 6;
  // An optional PrimaryKey message, providing details about the primary key of the table.
  optional PrimaryKey primary_key = 7;
  // A list of ForeignKey messages detailing the foreign keys associated with the table.
  repeated ForeignKey foreign_keys = 8;
  // A list of ForeignKey messages detailing the keys in other tables that reference this table.
  repeated ForeignKey exported_keys = 9;
  // A list of Index messages detailing the indexes defined on the table.
  repeated Index indexes = 10;
}

/*
The Column message describes the attributes of a specific column within a table.
*/
message Column {
  // The namespace or schema of the column’s table.
  string namespace_name = 2;
  // The table to which this column belongs.
  string table_name = 3;
  // The name of the column.
  string column_name = 4;
  // The data type of the column.
  string type_name = 5;
  // The length or size of the column type, if applicable.
  optional int32 type_length = 6;
  // The scale of the column type, if applicable.
  optional int32 type_scale = 7;
  // Indicates if the column can contain null values.
  bool is_nullable = 8;
  // The default value of the column, represented as a string.
  optional string default_value_as_string = 9;
  // The positional index of the column in the table.
  int32 column_index = 10;
  // The collation name for the column, if applicable.
  optional string collation = 11;
  // Indicates if the column is hidden.
  bool is_hidden = 12;
  // An enumeration indicating the type of column (e.g., REGULAR, CALCULATED, VERSION).
  ColumnType column_type = 13;

  /*
  The PrimaryKey message provides details about a table’s primary key.
  */
  enum ColumnType {
    // The database where the primary key’s table is located.
    UNSPECIFIED = 0;
    // The namespace or schema of the primary key’s table.
    REGULAR = 1;
    // The table with this primary key.
    CALCULATED = 2;
    // The columns that make up the primary key.
    VERSION = 3;
  }
}

/*
The PrimaryKey message provides details about a table’s primary key.
*/
message PrimaryKey {
  // The database where the primary key’s table is located.
  string database_name = 1;
  // The namespace or schema of the primary key’s table.
  string namespace_name = 2;
  // The table with this primary key.
  string table_name = 3;
  // The columns that make up the primary key.
  repeated Column columns = 4;
}

/*
The ForeignKey message details a foreign key relationship between tables, providing information about the linkage between a table's column(s) and the column(s) of another table it references.
This relationship is crucial for maintaining referential integrity within the database.
*/
message ForeignKey {
  /*
  The namespace or schema of the referenced table.
  This indicates the specific namespace or schema within the database where the referenced table resides.
  */
  optional string referenced_namespace_name = 2;
  /*
  The table being referenced by the foreign key.
  This field identifies the target table that contains the referenced columns.
  */
  string referenced_table_name = 3;
  // The columns in the referenced table. These are the columns in the referenced table that the foreign key points to.
  repeated Column referenced_columns = 4;
  /*
  The columns in the current table that make up the foreign key.
  These columns in the table contain the foreign key constraint reference the corresponding columns in the referenced table.
  */
  repeated Column foreign_columns = 8;
  /*
  A numeric representation of the action taken when a referenced row is updated.
  This rule determines how changes to the referenced columns affect the rows that hold the foreign key.
  */
  int32 update_rule = 10;
  /*
  A numeric representation of the action taken when a referenced row is deleted.
  Similar to the update rule, this defines the behavior of the foreign key relationship when rows in the referenced table are deleted.
  */
  int32 delete_rule = 11;
  /*
  An optional name for the foreign key constraint.
  This allows for the naming of the foreign key constraint for easier reference and management within the database.
  */
  optional string key_name = 12;
}

/*
The Index message provides details about an index defined on a table. Indexes are crucial for improving the performance of data retrieval operations by effectively organizing the data stored in a database table. This message includes information about the index's database, namespace (or schema), table, uniqueness, name, columns involved, physical location, and type.
*/
message Index {
  /*
  The namespace or schema of the indexed table.
  This indicates the specific namespace or schema within the database where the indexed table resides.
  */
  string namespace_name = 2;
  /*
  The table on which the index is defined.
  This field identifies the specific table within the namespace that the index belongs to.
  */
  string table_name = 3;
  /*
  Indicates if the index enforces unique values.
  A boolean value where true means the index ensures that all values in the index are unique.
  */
  bool unique = 4;
  /*
  The name of the index.
  This allows for the naming of the index for easier reference and management within the database.
  */
  string index_name = 5;
  /*
  The columns that are part of the index.
  This repeated field lists all the columns included in the index, defining the order and structure of the index.
  */
  repeated Column columns = 6;
  /*
  A numeric identifier representing the location or storage of the index.
  This field is used to identify where the index is physically stored within the database system, if applicable.
  */
  int64 location = 8;
  /*
  A numeric representation indicating the type or mechanism of the index.
  This could represent different types of indexing strategies used by the database system, such as B-tree, hash, etc.
  */
  int32 index_type = 9;
}

/*
The Graph message will be used to represent the metadata of a graph entity.
As of now, the structure is empty but it is expected to encapsulate various attributes and details about graph entities in the future.
As of now, the Graph message is a placeholder and does not contain any fields.
*/
message Graph {
}

/*
The Document message will be used to encapsulate the metadata related to a document entity.
The structure is presently empty, but it’s expected to be expanded with attributes pertinent to documents in future updates.
At this moment, the Document message serves as a placeholder and does not possess any fields.
*/
message Document {
}