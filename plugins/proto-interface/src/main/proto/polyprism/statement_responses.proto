/*
Messages related to statements in a query language and their results.
*/

syntax = "proto3";

import "polyprism/relational_frame.proto";
import "polyprism/graph_frame.proto";
import "polyprism/document_frame.proto";

option java_multiple_files = true;
option java_package = "org.polypheny.prism";
option java_outer_classname = "StatementResponses";

package polypheny.protointerface;

/*
Response of the server on the request of a client to close the result set of a specific statement.
This message has no fields. It merely serves as an acknowledgement.
 */
message CloseResultResponse {
}


/*
Represents the response after executing a statement.
This message contains the identifier of the executed statement and optionally, the result of the execution.
The result can vary based on the type of statement executed, ranging from scalar values to complex data frames.
*/
message StatementResponse {
  // The unique identifier of the executed statement.
  int32 statement_id = 1;
  /*
  (Optional) The result of the executed statement.
  This could be a scalar value or a data frame, depending on the type of statement executed.
  */
  optional StatementResult result = 2;
}

/*
Encapsulates the result of an executed statement.
This can include scalar values for simple queries or data frames for queries that return multiple rows or complex data.
*/
message StatementResult {
  // A scalar result value, often used to represent the number of rows affected by an operation.
  int64 scalar = 1;
  // (Optional) A frame of data, which could be a relational table, a graph, or a set of documents.
  optional Frame frame = 2;
}

/*
Represents the response after executing a batch of statements.
This includes the batch identifier and a list of scalar results for each statement in the batch,
typically representing the number of rows affected by each operation.
*/
message StatementBatchResponse {
  // The unique identifier of the executed batch.
  int32 batch_id = 1;
  // List of scalar results for each statement in the batch.
  repeated int64 scalars = 2;
}

/*
Provides metadata about a prepared statement, including its parameters.
This information is crucial for correctly binding parameters to the statement before execution.
*/
message PreparedStatementSignature {
  // The unique identifier of the prepared statement.
  int32 statement_id = 1;
  // Metadata about each parameter required by the statement, detailing type, name, and other characteristics.
  repeated ParameterMeta parameter_metas = 2;
}


/*
Provides metadata about a single parameter of a prepared statement.
This includes details about the parameter's precision, scale, data type, and names.
*/
message ParameterMeta {
  // Precision of the parameter, typically used for numeric types.
  int32 precision = 1;
  // Scale of the parameter, typically used for decimal types.
  int32 scale = 2;
  // The data type of the parameter.
  string type_name = 3;
  // (Optional) The name of the placeholder specified for this value.
  optional string parameter_name = 4;
  // The name of the parameter, if specified.
  string name = 5;
}

/*
Represents the response after closing a prepared statement.
The message is currently empty, serving as a simple acknowledgment of the action.
This message does not contain any fields. It simply serves as an acknowledgment.
*/
message CloseStatementResponse {
}

/*
Represents a frame of data that could be one of several types, offering flexibility in representing different types of data responses.
This structure allows for a more generic interface that can handle various data structures.
*/
message Frame {
  // Indicates if this frame is the last in a series of frames, useful for paginated results.
  bool is_last = 1;
  // The actual data frame. It could be a relational table (RelationalFrame), a graph (GraphFrame), or a document (DocumentFrame).
  oneof result {
    RelationalFrame relational_frame = 2;
    GraphFrame graph_frame = 3;
    DocumentFrame document_frame = 4;
  }
}

