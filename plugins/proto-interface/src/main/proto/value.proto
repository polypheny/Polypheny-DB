syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.polypheny.prism";
option java_outer_classname = "ProtoValueProto";

package polypheny.prism;

// Specifies the type of a proto value. This enum contains a value for each datatype supported by the DBMS.
enum ProtoPolyType {
  // Default unspecified type.
  UNSPECIFIED = 0;
  // Boolean type, true or false.
  BOOLEAN = 1;
  // 8-bit integer.
  TINYINT = 2;
  // 16-bit integer.
  SMALLINT = 3;
  // 32-bit integer.
  INTEGER = 4;
  // 64-bit integer.
  BIGINT = 5;
  // Arbitrary precision number.
  DECIMAL = 6;
  // Single precision floating point.
  REAL = 7;
  // Alias for REAL.
  FLOAT = 8;
  // Double precision floating point.
  DOUBLE = 9;
  /*
  Date value representing a specific day independent of time.
  Specified in days since epoch till the start of the specified day.
   */
  DATE = 10;
  // Time value without timezone in milliseconds since midnight.
  TIME = 11;
  // Timestamp without timezone. Specified as milliseconds since epoch.
  TIMESTAMP = 13;
  // Interval
  INTERVAL = 15;
  // Fixed length character string.
  CHAR = 28;
  // Variable length character string.
  VARCHAR = 29;
  // Text data type.
  TEXT = 58;
  // Binary data as byte string.
  BINARY = 30;
  // Variable length binary data as byte string.
  VARBINARY = 31;
  // Null type.
  NULL = 32;
  // Array type containing elements of one of the ProtoPolyTypes.
  ARRAY = 33;
  // Map type storing key value pairs. Key and value can be arbitrary values of one of the ProtoPolyTypes.
  MAP = 34;
  // Document type similar to a map but used in the document model to represent documents returned as a result.
  DOCUMENT = 35;
  // Graph type. Returned by a query in the graph data model.
  GRAPH = 36;
  // Graph node type. Used inside the graph type to represent a graphs nodes.
  NODE = 37;
  // Graph edge type. Used inside the graph type to represent a graphs edges.
  EDGE = 38;
  // Graph path type. Used in results of the graph data model to return a the result of graph queries returning a path.
  PATH = 39;
  // Image data type. Subtype of the file type. Same as binary but containing image data.
  IMAGE = 40;
  // Video data type. Subtype of the file type. Same as binary but containing video data.
  VIDEO = 41;
  // Audio data type. Subtype of the file type. Same as binary but containing audio data.
  AUDIO = 42;
  // File data type. Same as binary but containing the data of an arbitrary file.
  FILE = 43;
  // Distinct type (a named scalar type). Not supported yet!
  DISTINCT = 44;
  // Structured type. Contains an arbitrary set of other ProtoValues of any of the ProtoValueTypes. Not supported yet!
  STRUCTURED = 45;
  // Row type.
  ROW = 46;
  // Other types not specifically listed.
  OTHER = 47;
  // Cursor type.
  CURSOR = 48;
  // Column list type.
  COLUMN_LIST = 49;
  // Dynamic star type (used for dynamic column projection).
  DYNAMIC_STAR = 50;
  // Geometric data type.
  GEOMETRY= 51;
  // Symbol type.
  SYMBOL = 52;
  // JSON data type.
  JSON = 53;
  // Multiset type.
  MULTISET = 54;
  // Any type (a type that can hold any value).
  ANY = 55;
  // User-defined type.
  USER_DEFINED_TYPE = 56;
  // Row identifier type.
  ROW_ID = 57;
}


/*
ProtoValue represents a single value supported by the DBMS.
It contains a wide range of fields each corresponding to one supported data type.
Only one field can be set at a time.
*/
message ProtoValue {
  oneof value {
    // Field used to represent a boolean. If set, all other fields must be empty.
    ProtoBoolean boolean = 1;
    // Field used to represent an integer of 32 bits.. If set, all other fields must be empty.
    ProtoInteger integer = 2;
    // Field used to represent a long integer of 64 bits. If set, all other fields must be empty.
    ProtoLong long = 3;
    // Field used to represent a BigDecimal. The value is represented using an unscaled value (arbitrary length byte string), scale (32bit) and precision (32bit). If set, all other fields must be empty.
    ProtoBigDecimal big_decimal = 12;
    // Field used to represent a floating-point number of 32 bits. If set, all other fields must be empty.
    ProtoFloat float = 7;
    // Field used to represent a double-precision (64 bit) floating-point number. If set, all other fields must be empty.
    ProtoDouble double = 6;
    // Field used to represent a date. Dates are stored in days since epoch till the start of the specified day. If set, all other fields must be empty.
    ProtoDate date = 5;
    // Field used to represent a time. The value is specified as milliseconds since midnight of a day. If set, all other fields must be empty.
    ProtoTime time = 9;
    // Field used to represent a timestamp. The value is specified as milliseconds since epoch. If set, all other fields must be empty.
    ProtoTimestamp timestamp = 10;
    // Field used to represent a time interval. Intervals are either specified in milliseconds or months. The unit is specified along the value. If set, all other fields must be empty.
    ProtoInterval interval = 13;
    // Field used to represent an string of arbitrary length. If set, all other fields must be empty.
    ProtoString string = 8;
    // Field used to represent binary data of arbitrary length. If set, all other fields must be empty.
    ProtoBinary binary = 4;
    // Field used to represent a null value. If set, all other fields must be empty.
    ProtoNull null = 11;
    // Field used to represent a list of ProtoValues. If set, all other fields must be empty.
    ProtoList list = 16;
    // Field used to represent a document consisting of key value pairs where keys and values are arbitrary ProtoValues. If set, all other fields must be empty.
    ProtoDocument document = 18;
    // Field used to represent a FILE type such as FILE, IMAGE, VIDEO or AUDIO.
    ProtoFile file = 19;
  }
}


/*
Represents a boolean value.
*/
message ProtoBoolean {
  // A boolean value.
  bool boolean = 1;
}

/*
Represents a 32-bit integer value.
*/
message ProtoInteger {
  // A 32-bit integer value.
  int32 integer = 1;
}

/*
Represents a 64-bit long integer value.
*/
message ProtoLong {
  // A 64-bit long integer value.
  int64 long = 1;
}

/*
Represents a BigDecimal value with specified precision and scale.
The value is reconstructed by calculating unscaled_value * 10 ^ -scale.
*/
message ProtoBigDecimal {
  // The scale of the BigDecimal.
  int32 scale = 1;
  // The unscaled value of the BigDecimal.
  bytes unscaled_value = 3;
}

/*
Represents a single precision floating point number.
*/
message ProtoFloat {
  // A single precision floating point number.
  float float = 1;
}

/*
Represents a double precision floating point number.
*/
message ProtoDouble {
  // A double precision floating point number.
  double double = 1;
}

/*
Represents a date as a 64-bit integer.
*/
message ProtoDate {
  // Days since epoch till start of the specified day.
  int64 date = 1;
}

/*
Represents a time value.
*/
message ProtoTime {
  // Milliseconds since midnight of an arbitrary day.
  int32 time = 1;
}

/*
Represents a timestamp value.
*/
message ProtoTimestamp {
  // The timestamp value in milliseconds since epoch.
  int64 timestamp = 1;
}

/*
Represents an interval value.
*/
message ProtoInterval {
  int64 milliseconds = 1;
  int64 months = 2;
}

/*
Represents a string value.
*/
message ProtoString {
  // A string value of arbitrary length.
  string string = 1;
}

/*
Represents binary data.
*/
message ProtoBinary {
  // Binary data of arbitrary length.
  bytes binary = 1;
}

/*
Represents a null value. This message does not contain any fields.
*/
message ProtoNull {
}

/*
Represents a list of ProtoValue items.
*/
message ProtoList {
  // The list of ProtoValue items.
  repeated ProtoValue values = 1;
}

/*
Defines a key-value pair using ProtoValues for both key and value.
*/
message ProtoEntry {
  // The key of the entry.
  ProtoValue key = 1;
  // The value of the entry.
  ProtoValue value = 2;
}

/*
Represents a document consisting of multiple ProtoEntry items.
*/
message ProtoDocument {
  // The list of ProtoEntry items forming the document.
  repeated ProtoEntry entries = 1;
}

/*
Represents a file containing large binary data.
 */
message ProtoFile {
  // The content of the file in binary.
  bytes binary = 1;
}