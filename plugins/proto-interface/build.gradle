plugins {
    id 'java'
    id "com.google.protobuf" version "$protobuf_plugin_version"
}

apply plugin: "com.google.protobuf"

group "org.polypheny"

configurations {
    tests {
        extendsFrom testRuntimeOnly
    }
}

repositories {
    mavenCentral()
}

dependencies {

    compileOnly project(path: ':core')
    compileOnly project(path: ':dbms')
    compileOnly project(path: ':plugins:sql-language')
    compileOnly project(path: ':plugins:mql-language')

    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: protobuf_version


    // --- Test Compile ---
    testImplementation project(path: ':dbms', configuration: 'test')
    testImplementation project(path: ':core', configuration: 'tests')
    testImplementation project(path: ':core')
    testRuntimeOnly project(path: ':dbms')
    //testImplementation project(path: ':plugins:mql-language')

}

def generatedDirName = "${project.buildDir}/generated"

// compile protos on build
compileJava.dependsOn(generateProto)
compileTestJava.mustRunAfter(javadoc)
compileTestJava.mustRunAfter(jar)
compileTestJava.mustRunAfter(plugin)

test.dependsOn(":dbms:shadowJar")

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobuf_version}"
    }
    generatedFilesBaseDir = "${generatedDirName}/proto"
}

sourceSets {
    main {
        proto {
            srcDir "${protobuf.generatedFilesBaseDir}/proto/main/java"
        }
        java {
            srcDirs = ["src/main/java", "build/generated/source/proto/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}

delombok {
    dependsOn(':plugins:proto-interface:generateProto')
    dependsOn(':plugins:sql-language:processResources')
    dependsOn(':plugins:mql-language:processResources')
}

compileJava {
    dependsOn(":core:processResources")
}

extractIncludeProto {
    dependsOn(':core:generateVersionProperties')
    dependsOn(':core:compileJava')
    dependsOn(':dbms:compileJava')
    dependsOn(':plugins:sql-language:compileJava')
    dependsOn(':plugins:mql-language:compileJava')
}


/**
 * Tests
 */
test {
    maxHeapSize = "2g" // Increase heap size (default is 512MB)
}

/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Version": "$project.version"
    }
}

java {
    withJavadocJar()
    withSourcesJar()
    sourcesJar.dependsOn(generateProto)
}


/**
 * LICENSEE
 */
licensee {
    allow('BSD-3-Clause')
}
