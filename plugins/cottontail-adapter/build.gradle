plugins {
    id "org.jetbrains.kotlin.jvm" version "1.7.22"
    id("de.undercouch.download") version "5.6.0"
}

configurations {
    preDependencyConfig
}

group "org.polypheny"

apply plugin: "kotlin"


dependencies {
    compileOnly project(":core")
    compileOnly project(":plugins:sql-language")

    implementation group: "io.grpc", name: "grpc-all", version: cottontaildb_grpc_version

    // Cottontail DB Dependencies (necessary due to dbisnexus shutdown)
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: cottontaildb_kotlin_version
    implementation group: 'org.eclipse.collections', name: 'eclipse-collections-api', version: cottontaildb_eclipse_version
    implementation group: 'org.eclipse.collections', name: 'eclipse-collections', version: cottontaildb_eclipse_version
    implementation group: 'org.eclipse.collections', name: 'eclipse-collections-forkjoin', version: cottontaildb_eclipse_version
    implementation group: 'com.google.guava', name: 'guava', version: cottontaildb_guave_version
    implementation group: 'org.mapdb', name: 'mapdb', version: cottontaildb_mapdb_version

    // Cottontail DB
    implementation group: 'org.vitrivr', name: 'cottontaildb', version: cottontaildb_version
    implementation group: 'org.vitrivr', name: 'cottontaildb-proto', version: cottontaildb_driver_version

    // --- Test Compile ---
    testImplementation project(path: ":dbms", configuration: "test")
    testImplementation project(path: ":dbms")
    testImplementation project(path: ":core", configuration: "tests")
    testImplementation project(path: ":core")
}


compileKotlin {
    dependsOn(":plugins:sql-language:processResources")
}

compileJava {
    dependsOn(processResources)
    dependsOn(":plugins:sql-language:processResources")
}

delombok {
    dependsOn(":plugins:sql-language:processResources")
}

test.dependsOn(":dbms:shadowJar")


sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            destinationDirectory.set(file(project.buildDir.absolutePath + "/test-classes"))
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}


/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Version": "$project.version"
    }
}
java {
    withJavadocJar()
    withSourcesJar()
}


licensee {
    allow('Apache-2.0')
    allow('MIT')
    allow('BSD-2-Clause')
    allow('BSD-3-Clause')

    allow('EPL-1.0')

    allowUrl('https://golang.org/LICENSE')

    allowDependency('org.bouncycastle', 'bcpkix-jdk15on', '1.67') { because 'MIT license' }
    allowDependency('org.bouncycastle', 'bcprov-jdk15on', '1.67') { because 'MIT license' }

    allowDependency('org.vitrivr', 'cottontaildb', '0.13.3') { because 'MIT license' }
    allowDependency('org.vitrivr', 'cottontaildb-proto', '0.13.0') { because 'MIT license' }

    allowDependency('javax.annotation', 'javax.annotation-api', '1.3.2') { because 'CDDL license' }

    allowDependency('net.jcip', 'jcip-annotations', '1.0') { because 'transitive, Apache 2. according to github' }
}
