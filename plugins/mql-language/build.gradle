import org.javacc.plugin.gradle.javacc.CompileJavaccTask

plugins {
    id "org.javacc.javacc" version "$javacc_plugin_version"
}

group "org.polypheny"


configurations {
    javacc
    tests {
        extendsFrom testRuntimeOnly
    }
}


dependencies {
    compileOnly project(":core")
    compileOnly project(":monitoring")
    compileOnly project(":webui")
    compileOnly project(":dbms")

    javacc group: "net.java.dev.javacc", name: "javacc", version: javacc_version  // BSD 2-clause

    implementation group: "org.eclipse.jetty.websocket", name: "websocket-api", version: jetty_websocket_api_version

    implementation group: "org.mongodb", name: "mongodb-driver-sync", version: mongodb_driver_sync_version  // Apache 2.0


    // --- Test Compile ---
    testImplementation project(path: ":core", configuration: "tests")
    testImplementation project(path: ":core")
    testImplementation project(path: ":dbms", configuration: "test")
    testImplementation project(path: ":dbms")

    testCompileOnly(group: "org.pf4j", name: "pf4j", version: pf4j_version)

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: junit_jupiter_version
}



task generateParser(type: CompileJavaccTask) {
    getConventionMapping().map("classpath", { configurations.javacc })
    arguments = [static: "false"]
    inputDirectory = file("src/main/codegen")
    outputDirectory = file(project.buildDir.absolutePath + "/generated-sources/org/polypheny/db/mql/parser")
}

compileJava {
    dependsOn("generateParser")
    dependsOn(":core:processResources")
    dependsOn(":config:processResources")
    dependsOn(":information:processResources")
    dependsOn(":monitoring:processResources")
    dependsOn(":dbms:processResources")
}

delombok {
    dependsOn(":dbms:processResources")
}

test.dependsOn(":dbms:shadowJar")


sourceSets {
    main {
        java {
            //srcDirs = ["src/main/java","build/generated-sources"]
            srcDirs files("${buildDir}/generated-sources").builtBy(generateParser)
        }
        resources {
            srcDirs = ["src/main/resources"]
            exclude "version/*.properties"
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            destinationDirectory.set(file(project.buildDir.absolutePath + "/test-classes"))
        }
        resources {
            // We need the main resources for the tests as well.
            srcDirs = ["src/test/resources", "src/main/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}


/**
 * JavaDoc
 */
javadoc {
    // suppress most of the warnings
    options.addStringOption("Xdoclint:none", "-quiet")
    // Include private fields in JavaDoc
    options.memberLevel = JavadocMemberLevel.PRIVATE
    // Use HTML 5 for JavaDoc
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
    // Exclude build dir
    exclude "fmpp/mql/javacc/**"
}

/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Version": "$project.version"
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
}
task testJar(type: Jar, dependsOn: testClasses) {
    archiveClassifier = 'tests'
    from sourceSets.test.output
}
artifacts {
    //archives jar // regular jar containing only the compiled source
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files
    tests testJar // jar file containing the test classes
}

licensee {
    allow('Apache-2.0')
}
