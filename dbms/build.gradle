import java.text.SimpleDateFormat

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        google()
    }
    dependencies {
        classpath group: "app.cash.licensee", name: "licensee-gradle-plugin", version: licensee_version
        classpath group: "com.jaredsburrows", name: "gradle-license-plugin", version: license_report_version
    }
}

plugins {
    id "application"
    id "com.github.johnrengelman.shadow" version "$shadow_plugin_version"
}

run {
    systemProperty 'pf4j.pluginsDir', '../build/plugins'
    dependsOn(":plugins:assemblePlugins")
}

apply plugin: "app.cash.licensee"
apply plugin: "com.jaredsburrows.license"

group "org.polypheny"


dependencies {
    implementation project(":core")
    implementation project(":webui")
    implementation project(":monitoring")

    ////// Logging
    implementation group: "org.apache.logging.log4j", name: "log4j-core", version: log4j_core_version  // Apache 2.0
    implementation group: "org.apache.logging.log4j", name: "log4j-api", version: log4j_api_version  // Apache 2.0
    implementation group: "org.apache.logging.log4j", name: "log4j-slf4j-impl", version: log4j_slf4j_impl_version  // Apache 2.0

    ////// SLF4J
    implementation group: 'org.pf4j', name: 'pf4j', version: pf4j_version // Apache 2.0

    implementation group: "com.github.rvesse", name: "airline", version: airline_version  // Apache 2.0
    implementation group: "com.github.oshi", name: "oshi-core", version: oshi_core_version  // MIT

    implementation group: "com.j256.simplemagic", name: "simplemagic", version: simplemagic_version
    implementation group: 'org.jetbrains', name: 'annotations', version: '20.1.0'// ISC

    // workaround to fix cottontail todo remove: when grpc-all is same in cottontail and for plugin
    implementation group: "io.grpc", name: "grpc-all", version: cottontaildb_grpc_version


    // --- Test Compile ---
    testImplementation project(path: ":core", configuration: "tests")

    // Workaround so org.polypheny.db.docker gets the right protobuf during testing
    testImplementation group: "com.google.protobuf", name: "protobuf-java", version: protobuf_version // BSD 3-clause

    testImplementation group: "org.polypheny", name: "polypheny-jdbc-driver", version: polypheny_jdbc_driver_version  // Apache 2.0

    testImplementation group: "junit", name: "junit", version: junit_version
    testImplementation group: "org.hamcrest", name: "hamcrest-core", version: hamcrest_core_version  // BSD 3-clause

    testImplementation group: "com.konghq", name: "unirest-java", version: unirest_version // MIT

    // TODO MV: Remove these dependencies and reactivate the corresponding tests using docker deployed data stores
    testImplementation group: "com.wix", name: "wix-embedded-mysql", version: embedded_mysql_version
    testImplementation group: "io.zonky.test", name: "embedded-postgres", version: embedded_postgres_version
    testImplementation group: "monetdb", name: "monetdb-java-lite", version: embedded_monetdb_version

    implementation group: "org.mongodb", name: "mongodb-driver-sync", version: mongodb_driver_sync_version  // Apache 2.0

}


sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
            outputDir = file(project.buildDir.absolutePath + "/classes")
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            outputDir = file(project.buildDir.absolutePath + "/test-classes")
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}


licensee {
    allow('Apache-2.0')
    allow('MIT')
    allow('BSD-2-Clause')
    allow('BSD-3-Clause')
    allow('CC0-1.0')
    allowUrl('http://opensource.org/licenses/BSD-3-Clause')
    allowUrl('http://www.wtfpl.net/')
    allowUrl('https://creativecommons.org/publicdomain/zero/1.0/')
    allowUrl('http://www.opensource.org/licenses/bsd-license.php') // BSD 2-Clause
    allowUrl('http://www.eclipse.org/org/documents/edl-v10.php') // EDL 1.0
    allowUrl('http://www.opensource.org/licenses/Apache-2.0') // Apache 2.0
    allowUrl('http://www.jcabi.com/LICENSE.txt') // Own license but conforms
    allowUrl('https://www.bouncycastle.org/licence.html') //MIT

    allowDependency('com.j256.simplemagic', 'simplemagic', '1.16') { because 'ISC license' }
    allowDependency('com.adobe.xmp', 'xmpcore', '6.0.6') { because 'BSD 3-Clause' }
    allowDependency('org.bouncycastle', 'bcpkix-jdk15on', '1.67') { because 'MIT license' }
    allowDependency('org.bouncycastle', 'bcprov-jdk15on', '1.67') { because 'MIT license' }
    allowDependency('org.javassist', 'javassist', '3.28.0-GA') { because 'Apache 2.0 license' }
    allowDependency('net.java.dev.jna', 'jna', '5.8.0') { because 'Apache 2.0 license' }
    allowDependency('net.java.dev.jna', 'jna-platform', '5.8.0') { because 'Apache 2.0 license' }
    allowDependency('jakarta.xml.bind', 'jakarta.xml.bind-api', '2.3.2') { because 'Eclipse Distribution License 1.0' }
    allowDependency('org.codehaus.janino', 'janino', '3.0.11') { because 'BSD 3-Clause' }
    allowDependency('org.codehaus.janino', 'commons-compiler', '3.0.11') { because 'BSD 3-Clause' }
    allowDependency('com.google.re2j', 're2j', '1.5') { because 'BSD 3-Clause' }


    // Category B
    allow('EPL-1.0')
    allow('MPL-1.1')
    allowUrl('http://www.eclipse.org/legal/epl-2.0') // EPL 2.0
    allowUrl('https://www.eclipse.org/org/documents/epl-v10.php') // EPL 1.0
    allowUrl('https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.txt') // EPL 2.0

    allowDependency('com.github.jnr', 'jnr-posix', '3.0.50') { because 'Eclipse Public License v. 2.0' }
    allowDependency('jakarta.annotation', 'jakarta.annotation-api', '1.3.5') { because 'Eclipse Public License v. 2.0' }
    allowDependency('jakarta.ws.rs', 'jakarta.ws.rs-api', '2.1.6') { because 'Eclipse Public License v. 2.0' }
    allowDependency('jakarta.activation', 'jakarta.activation-api', '1.2.1') { because 'Eclipse Public License v. 2.0' }
    allowDependency('javax.servlet', 'javax.servlet-api', '3.1.0') {
        because 'Servlet-api.jar and javax.servlet-*.jar are under the CDDL license, the original source code for this can be found at http://www.eclipse.org/jetty/downloads.php'
    }

    allowDependency('org.ow2.asm', 'asm-util', '7.1') { because 'BSD 3-Clause' }
    allowDependency('org.ow2.asm', 'asm', '7.1') { because 'BSD 3-Clause' }
    allowDependency('org.ow2.asm', 'asm-analysis', '7.1') { because 'BSD 3-Clause' }
    allowDependency('org.ow2.asm', 'asm-commons', '7.1') { because 'BSD 3-Clause' }
    allowDependency('org.ow2.asm', 'asm-tree', '7.1') { because 'BSD 3-Clause' }

    // Glassfish
    allowDependency('org.glassfish.jersey.core', 'jersey-common', '2.30.1') { because 'Eclipse Public License v. 2.0' }
    allowDependency('org.glassfish.jersey.core', 'jersey-client', '2.30.1') { because 'Eclipse Public License v. 2.0' }
    allowDependency('org.glassfish.jersey.inject', 'jersey-hk2', '2.30.1') { because 'Eclipse Public License v. 2.0' }
    allowDependency('org.glassfish.jersey.connectors', 'jersey-apache-connector', '2.30.1') { because 'Eclipse Public License v. 2.0' }
    allowDependency('org.glassfish.hk2.external', 'jakarta.inject', '2.6.1') { because 'Eclipse Public License v. 2.0' }
    allowDependency('org.glassfish.hk2.external', 'aopalliance-repackaged', '2.6.1') { because 'Eclipse Public License v. 2.0' }
    allowDependency('org.glassfish.hk2', 'osgi-resource-locator', '1.0.3') { because 'Eclipse Public License v. 2.0' }
    allowDependency('org.glassfish.hk2', 'hk2-api', '2.6.1') { because 'Eclipse Public License v. 2.0' }
    allowDependency('org.glassfish.hk2', 'hk2-locator', '2.6.1') { because 'Eclipse Public License v. 2.0' }
    allowDependency('org.glassfish.hk2', 'hk2-utils', '2.6.1') { because 'Eclipse Public License v. 2.0' }

    // transitive
    allowDependency('org.yaml', 'snakeyaml', '1.15') { because 'Apache 2.0 license' }
}

compileJava {
    dependsOn(":webui:processResources")
    dependsOn(":monitoring:processResources")
}

/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Version": "$project.version"
        attributes "Implementation-Version": project.version
        attributes "Build-Date": "${buildTime()}"
        attributes "Main-Class": "org.polypheny.db.PolyphenyDb"
    }
    metaInf {
        from(rootProject.rootDir, {
            include "LICENSE"
            include "NOTICE"
        })
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}
shadowJar {
    zip64 true
    classifier ""
    mergeServiceFiles {
        path = 'META-INF/services' // default
        include("io.grpc.*")
    }
}

task deletePlugins(type: Delete) {
    delete 'src/main/resources/plugins'
}
task copyPlugins(type: Copy, dependsOn: deletePlugins) {
    from('../build/plugins')
    into('src/main/resources/plugins')
    include('*.zip')
}
shadowJar.dependsOn(copyPlugins)
copyPlugins.dependsOn(":plugins:assemblePlugins")


// due to gradle 7.6+
configurations {
    test {
        extendsFrom testRuntimeOnly
    }
}


task testJar(type: Jar, dependsOn: testClasses) {
    classifier 'tests'
    from sourceSets.test.output
}

assemble.dependsOn shadowJar
artifacts {
    //archives jar // regular jar containing only the compiled source
    archives shadowJar // fat jar which additionally contains all dependencies
    //archives sourcesJar // jar file containing the java doc files
    //archives javadocJar // jar file containing the source files
    // due to plugins
    test testJar
}


/**
 * Release
 */
application {
    mainClassName = 'org.polypheny.db.PolyphenyDb'
    applicationName = 'Polypheny-DB'
    //applicationDefaultJvmArgs = ["-Dlog4j.configuration=config/log4j.properties"]
}

tasks.register('runReset', JavaExec) {
    group = 'Execution'
    description = 'Run the main class with JavaExecTask'
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'org.polypheny.db.PolyphenyDb'
    args = ['-resetCatalog', '-resetPlugins']
}

startScripts {
    defaultJvmOpts += ['-Xmx6g', '-XX:+HeapDumpOnOutOfMemoryError', '-Dfile.encoding=UTF-8']
    dependsOn(shadowJar)
    dependsOn(":jar")
}

distTar {
    dependsOn(shadowJar)
}

distZip {
    dependsOn(shadowJar)
}

static def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

startShadowScripts {
    dependsOn(jar)
}

shadowDistTar {
    dependsOn(jar)
}

shadowDistZip {
    dependsOn(jar)
}
