import java.text.SimpleDateFormat

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        google()
    }
    dependencies {
        classpath group: "app.cash.licensee", name: "licensee-gradle-plugin", version: licensee_version
    }
}

plugins {
    id "application"
    id "com.github.johnrengelman.shadow" version "$shadow_plugin_version"
}

run {
    systemProperty 'pf4j.pluginsDir', '../build/plugins'
    dependsOn(":plugins:assemblePlugins")
}

apply plugin: "app.cash.licensee"

group "org.polypheny"

test {
    useJUnitPlatform()
    maxHeapSize = "2g" // Increase heap size (default is 512MB)
}

dependencies {
    implementation project(":core")
    implementation project(":webui")
    implementation project(":monitoring")


    ////// SLF4J
    implementation group: "io.javalin", name: "javalin", version: javalin_version  // Apache 2.0

    implementation group: "com.github.rvesse", name: "airline", version: airline_version  // Apache 2.0

    implementation group: "org.jetbrains", name: "annotations", version: jetbrains_annotations_version  // ISC

    // workaround to fix cottontail todo remove: when grpc-all is same in cottontail and for plugin
    implementation(group: "io.grpc", name: "grpc-all", version: cottontaildb_grpc_version) {
        exclude group: "junit"
    } // Apache 2.0

    // --- Test Compile ---
    testImplementation project(path: ":core", configuration: "tests")

    // Workaround so org.polypheny.db.docker gets the right protobuf during testing
    testImplementation group: "com.google.protobuf", name: "protobuf-java", version: protobuf_version // BSD 3-clause

    testImplementation(group: "org.polypheny", name: "polypheny-jdbc-driver", version: polypheny_jdbc_driver_version) {
        exclude(group: "com.fasterxml.jackson.core")
        exclude(group: "com.fasterxml.jackson.databind")
    }  // Apache 2.0

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: junit_jupiter_version
    testRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit_jupiter_version)
    testImplementation group: "org.hamcrest", name: "hamcrest-core", version: hamcrest_core_version  // BSD 3-clause
    testImplementation group: "com.konghq", name: "unirest-java", version: unirest_version // MIT
    testImplementation group: "org.mongodb", name: "mongodb-driver-sync", version: mongodb_driver_sync_version  // Apache 2.0

    // GIS
    testImplementation group: "org.locationtech.jts", name: "jts-core", version: jts_version // Eclipse Public License 2.0 && Eclipse Distribution License 1.0 (BSD-3 Clause)
}


sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources", "bin/main/"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            destinationDirectory.set(file(project.buildDir.absolutePath + "/test-classes"))
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}


licensee {
    allow('Apache-2.0')
    allow('MIT')
    allowUrl('https://opensource.org/licenses/MIT') { because 'is MIT' }
    allow('BSD-2-Clause')
    allow('BSD-3-Clause')

    allowDependency('com.j256.simplemagic', 'simplemagic', '1.17') { because 'ISC license' }
    allowDependency('com.adobe.xmp', 'xmpcore', '6.0.6') { because 'BSD 3-Clause' }
    allowDependency('org.bouncycastle', 'bcpkix-jdk15on', '1.67') { because 'MIT license' }
    allowDependency('org.bouncycastle', 'bcprov-jdk15on', '1.67') { because 'MIT license' }
    allowDependency('org.bouncycastle', 'bcprov-jdk18on', '1.77') { because 'MIT license' }
    allowDependency('org.bouncycastle', 'bcpkix-jdk18on', '1.77') { because 'MIT license' }
    allowDependency('org.bouncycastle', 'bcutil-jdk18on', '1.77') { because 'MIT license' }
    allowDependency('org.bouncycastle', 'bctls-jdk18on', '1.77') { because 'MIT license' }
    allowDependency('jakarta.xml.bind', 'jakarta.xml.bind-api', '2.3.3') { because 'Eclipse Distribution License 1.0' }
    allowDependency('org.codehaus.janino', 'janino', '3.0.11') { because 'BSD 3-Clause' }
    allowDependency('org.codehaus.janino', 'commons-compiler', '3.0.11') { because 'BSD 3-Clause' }
    allowDependency('com.google.re2j', 're2j', '1.5') { because 'BSD 3-Clause' }


    // Category B
    allow('MPL-1.1')

    allowDependency('jakarta.annotation', 'jakarta.annotation-api', '1.3.5') { because 'Eclipse Public License v. 2.0' }
    allowDependency('jakarta.ws.rs', 'jakarta.ws.rs-api', '2.1.6') { because 'Eclipse Public License v. 2.0' }
    allowDependency('jakarta.activation', 'jakarta.activation-api', '1.2.2') { because 'Eclipse Public License v. 2.0' }
    allowDependency('javax.servlet', 'javax.servlet-api', '3.1.0') {
        because 'Servlet-api.jar and javax.servlet-*.jar are under the CDDL license, the original source code for this can be found at http://www.eclipse.org/jetty/downloads.php'
    }

    allowDependency('org.ow2.asm', 'asm', '9.4') { because 'BSD 3-Clause' }
    allowDependency('org.ow2.asm', 'asm-tree', '9.4') { because 'BSD 3-Clause' }
    allowDependency('org.ow2.asm', 'asm-commons', '9.4') { because 'BSD 3-Clause' }

    // GIS
    allowDependency('org.locationtech.jts', 'jts-core', '1.19.0') { because 'Eclipse Public License v. 2.0' }
    allowDependency('org.locationtech.jts.io', 'jts-io-common', '1.19.0') { because 'Eclipse Public License v. 2.0' }

    // Glassfish
    allowDependency('org.glassfish.hk2.external', 'jakarta.inject', '2.6.1') { because 'Eclipse Public License v. 2.0' }
    allowDependency('org.glassfish.hk2.external', 'aopalliance-repackaged', '2.6.1') { because 'Eclipse Public License v. 2.0' }
    allowDependency('org.glassfish.hk2', 'osgi-resource-locator', '1.0.3') { because 'Eclipse Public License v. 2.0' }
    allowDependency('org.glassfish.hk2', 'hk2-api', '2.6.1') { because 'Eclipse Public License v. 2.0' }
    allowDependency('org.glassfish.hk2', 'hk2-locator', '2.6.1') { because 'Eclipse Public License v. 2.0' }
    allowDependency('org.glassfish.hk2', 'hk2-utils', '2.6.1') { because 'Eclipse Public License v. 2.0' }
}


compileJava {
    dependsOn(":webui:processResources")
    dependsOn(":monitoring:processResources")
}

/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Version": "$project.version"
        attributes "Implementation-Version": project.version
        attributes "Build-Date": "${buildTime()}"
        attributes "Main-Class": "org.polypheny.db.PolyphenyDb"
    }
    metaInf {
        from(rootProject.rootDir, {
            include "LICENSE"
            include "NOTICE"
        })
    }
    from('/') {
        include 'dbms/bin/main/version.properties'
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
}
shadowJar {
    zip64 true
    archiveClassifier.set('')
    mergeServiceFiles {
        path = 'META-INF/services' // default
        include("io.grpc.*")
    }
}

task deletePlugins(type: Delete) {
    delete 'src/main/resources/plugins'
}
task deletePluginsBuild(type: Delete) {
    delete "$buildDir/classes/plugins"
}
task copyPlugins(type: Copy, dependsOn: deletePlugins) {
    from('../build/plugins')
    into('src/main/resources/plugins')
    include('*.zip')
}
task copyPluginsBuild(type: Copy, dependsOn: deletePluginsBuild) {
    from('../build/plugins')
    into("$buildDir/classes/plugins")
    include('*.zip')
}
jar.dependsOn(copyPlugins)
shadowJar.dependsOn(copyPlugins)
jar.dependsOn(copyPluginsBuild)
shadowJar.dependsOn(copyPluginsBuild)
copyPlugins.dependsOn(":plugins:assemblePlugins")
copyPluginsBuild.dependsOn(":plugins:assemblePlugins")
compileTestJava.dependsOn(copyPluginsBuild)

// due to gradle 7.6+
configurations {
    test {
        extendsFrom testRuntimeOnly
    }
}


task testJar(type: Jar, dependsOn: testClasses) {
    archiveClassifier = 'tests'
    from sourceSets.test.output
}

assemble.dependsOn shadowJar
artifacts {
    //archives jar // regular jar containing only the compiled source
    archives shadowJar // fat jar which additionally contains all dependencies
    //archives sourcesJar // jar file containing the java doc files
    //archives javadocJar // jar file containing the source files
    // due to plugins
    test testJar
}


/**
 * Release
 */
application {
    mainClassName = 'org.polypheny.db.PolyphenyDb'
    applicationName = 'Polypheny-DB'
    //applicationDefaultJvmArgs = ["-Dlog4j.configuration=config/log4j.properties"]
}

tasks.register('runDevReset', JavaExec) {
    group = 'Execution'
    description = 'Run the main class with JavaExecTask'
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'org.polypheny.db.PolyphenyDb'
    args = ['-resetCatalog', '-resetDocker', '-mode', 'dev']  // '-resetPlugins'
}

tasks.register('runDev', JavaExec) {
    group = 'Execution'
    description = 'Run the main class with JavaExecTask'
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'org.polypheny.db.PolyphenyDb'
    args = ['-mode', 'dev']
}

startScripts {
    defaultJvmOpts += ['-Xmx6g', '-XX:+HeapDumpOnOutOfMemoryError', '-Dfile.encoding=UTF-8']
    dependsOn(shadowJar)
    dependsOn(":jar")
}

distTar {
    dependsOn(shadowJar)
}

distZip {
    dependsOn(shadowJar)
}

static def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

startShadowScripts {
    dependsOn(jar)
}

shadowDistTar {
    dependsOn(jar)
}

shadowDistZip {
    dependsOn(jar)
}

def getLastLine(String cmd) {
    def output = ""
    def proc = cmd.execute()
    proc.in.eachLine { line -> output = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    output
}

def getCurrentBranch() {
    getLastLine("git rev-parse --abbrev-ref HEAD")
}

def getCurrentHash() {
    getLastLine("git rev-parse --short HEAD")
}

task createProperties() {
    doLast {
        new File("$buildDir/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = version
            p['branch'] = System.getenv("GIT_BRANCH") ?: getCurrentBranch()
            p['hash'] = System.getenv("GIT_HASH") ?: getCurrentHash()
            p.store w, null
        }
        // copy needed, otherwise the bean VersionController can't load the file at startup when running complete-app tests.
        copy {
            setDuplicatesStrategy(DuplicatesStrategy.WARN)
            from "$buildDir/version.properties"
            into "src/main/resources"
        }
    }
}
classes {
    dependsOn createProperties
}
