group "org.polypheny"


version = versionMajor + "." + versionMinor + versionQualifier


buildscript {
    dependencies {
        // Shadowing; used to make a fat jar (https://github.com/johnrengelman/shadow)
        classpath group: "com.github.jengelman.gradle.plugins", name: "shadow", version: shadow_plugin_version
    }
}


apply plugin: "com.github.johnrengelman.shadow"


dependencies {
    implementation project(":core")
    implementation project(":cassandra-adapter")
    implementation project(":cottontail-adapter")
    implementation project(":csv-adapter")
    implementation project(":file-adapter")
    implementation project(":jdbc-adapter")
    implementation project(":mongodb-adapter")
    implementation project(":catalog")
    implementation project(":webui")
    implementation project(":jdbc-interface")
    implementation project(":rest-interface")
    implementation project(":statistic")
    implementation project(":explore-by-example")

    ////// Logging
    implementation group: "org.apache.logging.log4j", name: "log4j-core", version: log4j_core_version  // Apache 2.0
    implementation group: "org.apache.logging.log4j", name: "log4j-api", version: log4j_api_version  // Apache 2.0
    implementation group: "org.apache.logging.log4j", name: "log4j-slf4j-impl", version: log4j_slf4j_impl_version  // Apache 2.0

    ////// CLI PARSING
    implementation group: "com.github.rvesse", name: "airline", version: airline_version  // Apache 2.0

    implementation group: "com.github.oshi", name: "oshi-core", version: oshi_core_version  // MIT

    implementation group: 'org.apache.commons', name: 'commons-math3', version: commons_math_version  // Apache 2.0

    implementation group: 'com.j256.simplemagic', name: 'simplemagic', version: simplemagic_version // ISC


    // --- Test Compile ---
    testImplementation project(path: ":core", configuration: "tests")

    testImplementation group: "org.polypheny", name: "polypheny-jdbc-driver", version: polypheny_jdbc_driver_version  // Apache 2.0

    testImplementation group: "junit", name: "junit", version: junit_version
    testImplementation group: "org.hamcrest", name: "hamcrest-core", version: hamcrest_core_version  // BSD 3-clause

    testImplementation group: "com.konghq", name: "unirest-java", version: unirest_version

    testImplementation group: "com.wix", name: "wix-embedded-mysql", version: embedded_mysql_version
    testImplementation group: "io.zonky.test", name: "embedded-postgres", version: embedded_postgres_version
    testImplementation group: "monetdb", name: "monetdb-java-lite", version: embedded_monetdb_version

    //testImplementation group: "net.hydromatic", name: "foodmart-data-hsqldb", version: foodmart_data_hsqldb_version
    //testImplementation group: "net.hydromatic", name: "foodmart-queries", version: foodmart_queries_version
    //testImplementation group: "net.hydromatic", name: "quidem", version: quidem_version
    //testImplementation group: "net.hydromatic", name: "scott-data-hsqldb", version: scott_data_hsqldb_version

}


sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
            outputDir = file(project.buildDir.absolutePath + "/classes")
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            outputDir = file(project.buildDir.absolutePath + "/test-classes")
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}


/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Version": "$project.version"
        attributes "Main-Class": "org.polypheny.db.PolyphenyDb"
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}
shadowJar {
    zip64 true
    classifier = ""
    mergeServiceFiles {
        setPath("META-INF/services")
        include("io.grpc.*")
    }
}
assemble.dependsOn shadowJar
artifacts {
    //archives jar // regular jar containing only the compiled source
    archives shadowJar // fat jar which additionally contains all dependencies
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files
}
