group "org.polypheny"


configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}


configurations {
    uiFiles { transitive = false }
}


dependencies {
    implementation project(":core")
    implementation project(":monitoring")

    uiFiles group: "org.polypheny", name: "polypheny-ui", version: polypheny_ui_version

    implementation group: "commons-io", name: "commons-io", version: commons_io_version  // Apache 2.0
    implementation group: "io.javalin", name: "javalin", version: javalin_version // Apache 2.0
    implementation group: "org.eclipse.jetty", name: "jetty-server", version: jetty_server_api // Apache 2.0 dual
    implementation group: "com.j256.simplemagic", name: "simplemagic", version: simplemagic_version // ISC
    implementation group: "org.apache.logging.log4j", name: "log4j-slf4j2-impl", version: log4j_slf4j_impl_version // Apache 2.0
    implementation group: "com.fasterxml.jackson.core", name: "jackson-core", version: jackson_core_version // Apache 2.0
    implementation group: "com.fasterxml.jackson.core", name: "jackson-annotations", version: jackson_annotations_version // Apache 2.0


    // --- Test Compile ---
    testImplementation project(path: ":core", configuration: "tests")
}


sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources", "$buildDir/webapp"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            destinationDirectory.set(file(project.buildDir.absolutePath + "/test-classes"))
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}

compileJava {
    dependsOn(":monitoring:processResources")
}

processResources {
    dependsOn(":webui:unzipUiFiles")
}


// unzip ui files
task unzipUiFiles(type: Copy) {
    from zipTree(configurations.uiFiles.singleFile)
    into "$buildDir/webapp"
    doLast {
        file("$buildDir/webapp/index").mkdirs()
        ant.move file: "$buildDir/webapp/webapp/index.html",
                toDir: "$buildDir/webapp/index/"
    }
}
tasks.register('deleteUiFiles') {
    project.delete(
            fileTree("$buildDir/webapp")
    )
}
unzipUiFiles.dependsOn(deleteUiFiles)
classes.dependsOn(unzipUiFiles)


/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Version": "$project.version"
    }
    from("$buildDir/webapp") // include webapp files
    from("$buildDir/public") // include public files
    duplicatesStrategy = 'include'
}
java {
    //withJavadocJar()
    //withSourcesJar()
}
