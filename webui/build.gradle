plugins {
    id("de.undercouch.download") version "5.6.0"
}

group "org.polypheny"


configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}


configurations {
    uiFiles { transitive = false }
}


dependencies {
    implementation project(":core")
    implementation project(":monitoring")

    //uiFiles group: "org.polypheny", name: "polypheny-ui", version: polypheny_ui_version

    implementation group: "commons-io", name: "commons-io", version: commons_io_version  // Apache 2.0
    implementation group: "io.javalin", name: "javalin", version: javalin_version // Apache 2.0
    api group: 'org.reflections', name: 'reflections', version: reflections_version // Apache 2.0

    implementation group: "com.j256.simplemagic", name: "simplemagic", version: simplemagic_version // ISC

    implementation group: "com.fasterxml.jackson.core", name: "jackson-core", version: jackson_core_version // Apache 2.0
    implementation group: "com.fasterxml.jackson.core", name: "jackson-annotations", version: jackson_annotations_version // Apache 2.0


    // --- Test Compile ---
    testImplementation project(path: ":core", configuration: "tests")
}


sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources", "build/resources/main"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            destinationDirectory.set(file(project.buildDir.absolutePath + "/test-classes"))
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}

compileJava {
    dependsOn(":monitoring:processResources")
}


processResources {
    setDuplicatesStrategy(DuplicatesStrategy.WARN)
    if (!project.hasProperty('withoutpullingUi')) {
        dependsOn(":webui:downloadUiZip")
    }
}


gradle.taskGraph.whenReady { taskGraph ->
    if (!project.hasProperty('withoutpullingUi')
        && !layout.buildDirectory.get().file("polypheny-ui.zip").asFile.exists()) {
        println("Pulling UI files")
        handleUi.dependsOn downloadUiZip
    }
}

task downloadUiZip(type: Download) {
    src 'https://artifacts.polypheny.com/ui/polypheny-ui.zip'
    dest "${layout.buildDirectory.asFile.get().absolutePath}/classes/polypheny-ui.zip"
    overwrite true
    onlyIfModified true
}

private Object getPolyphenyHome() {
    def homeDir = System.getProperty('user.home');
    def polyphenyDir = System.getenv('POLYPHENY_HOME') ?: "${homeDir}/.polypheny"
    polyphenyDir
}

task deleteUiOverwrite() {
    def home = getPolyphenyHome()
    def ui = file("${home}/ui")
    if (ui.exists() && ui.canWrite()) {
        delete ui
    }
}

clean.dependsOn(deleteUiOverwrite)

build.dependsOn(":webui:handleUi")


task handleUi() {
    // empty on purpose due to gradle weirdness
}

if (!project.hasProperty('withoutpullingUi')) {
    handleUi.finalizedBy downloadUiZip
}

/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Version": "$project.version"
    }
    duplicatesStrategy = 'include'
}
java {
    //withJavadocJar()
    //withSourcesJar()
}
