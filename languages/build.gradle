group "org.polypheny"

version = versionMajor + "." + versionMinor + versionQualifier


configurations {
    javacc
    tests {
        extendsFrom testRuntime
    }
}



dependencies {
    implementation project(":core")
    implementation project(":monitoring")
    implementation project(":sql-language")
    implementation project(":mql-language")

    javacc group: "net.java.dev.javacc", name: "javacc", version: javacc_version  // BSD 2-clause

    api group: "org.slf4j", name: "slf4j-api", version: slf4j_api_version  // MIT

    implementation group: "org.mongodb", name: "mongodb-driver-sync", version: mongodb_driver_sync_version  // Apache 2.0
    implementation(group: "com.jayway.jsonpath", name: "json-path", version: json_path_version) { exclude(module: "json-smart"); exclude(group: "org.slf4j") }  // Apache 2.0

    // --- Test Compile ---
    testImplementation project(path: ":core", configuration: "tests" )

    testImplementation group: "junit", name: "junit", version: junit_version
    testImplementation group: "org.incava", name: "java-diff", version: java_diff_version  // Apache 2.0
}


sourceSets {
    main {
        java {
            srcDirs = ["src/main/java","build/generated-sources"]
            outputDir = file(project.buildDir.absolutePath + "/classes")
        }
        resources {
            srcDirs = ["src/main/resources"]
            exclude "version/*.properties"
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            outputDir = file(project.buildDir.absolutePath + "/test-classes")
        }
        resources {
            // We need the main resources for the tests as well.
            srcDirs = ["src/test/resources", "src/main/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}


/**
 * JavaDoc
 */
javadoc {
    // suppress most of the warnings
    options.addStringOption("Xdoclint:none", "-quiet")
    // Include private fields in JavaDoc
    options.memberLevel = JavadocMemberLevel.PRIVATE
    // Use HTML 5 for JavaDoc
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Version": "$project.version"
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}
task testJar(type: Jar, dependsOn: testClasses) {
    classifier 'tests'
    from sourceSets.test.output
}
artifacts {
    //archives jar // regular jar containing only the compiled source
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files
    tests testJar // jar file containing the test classes
}
