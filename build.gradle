import org.jetbrains.gradle.ext.Application

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: "io.freefair.gradle", name: "lombok-plugin", version: lombok_version
        classpath group: "com.adarshr", name: "gradle-test-logger-plugin", version: gradle_test_logger_version
        classpath group: "org.reflections", name: "reflections", version: reflections_version
    }
}


plugins {
    id "org.jetbrains.kotlin.jvm" version "1.5.31"
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.1"
}


allprojects {

    version = versionMajor + "." + versionMinor + "." + versionMicro
    isRelease = isRelease.toBoolean()
    if (!isRelease) {
        version = version + "-SNAPSHOT"
    }

    buildscript {
        repositories {
            mavenCentral()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
            maven {
                url "https://clojars.org/repo/"
            }
        }
    }

    apply plugin: "java-library"
    apply plugin: "io.freefair.lombok"
    apply plugin: "com.adarshr.test-logger"

    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"
    javadoc.options.encoding = "UTF-8"

    sourceCompatibility = 1.11
    targetCompatibility = 1.11

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }


    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://clojars.org/repo/"
        }
        maven {
            // DBIS Nexus
            url "https://dbis-nexus.dmi.unibas.ch/repository/maven2/"
        }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    configurations.all {
        // check for updates every build
        resolutionStrategy.cacheChangingModulesFor 0, "seconds"
    }


    tasks.withType(Javadoc) {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption("html5", true)
        }
        // Suppress most of the warnings
        options.addStringOption("Xdoclint:none", "-quiet")
        // Include private fields in JavaDoc
        options.memberLevel = JavadocMemberLevel.PRIVATE
    }

    task dockerTests(type: Test) {
        description = 'Runs docker tests.'
        group = 'verification'
        useJUnit {
            includeCategories 'org.polypheny.db.docker.DockerManagerTest'
        }
        shouldRunAfter(tasks.named('test'))
    }
    dockerTests.dependsOn(testClasses)

    String storeName = System.getProperty("store.default") != null ? System.getProperty("store.default") : 'hsqldb'

    task integrationTests(type: Test) {
        description = 'Runs integration tests.'
        group = 'verification'
        systemProperty 'store.default', storeName
        useJUnit {
            includeCategories 'org.polypheny.db.AdapterTestSuite'
            excludeCategories 'org.polypheny.db.excluded.' + storeName.capitalize() + "Excluded"
        }
        shouldRunAfter(tasks.named('test'))
    }
    integrationTests.dependsOn(testClasses)

    testlogger {
        theme 'standard'
        showExceptions true
        showStackTraces true
        showFullStackTraces false
        showCauses true
        slowThreshold 2000
        showSummary true
        showSimpleNames false
        showPassed false
        showSkipped false
        showFailed true
        showStandardStreams true
        showPassedStandardStreams false
        showSkippedStandardStreams false
        showFailedStandardStreams true
        logLevel 'lifecycle'
    }


    idea {
        module {
            downloadJavadoc = true
            downloadSources = true

            inheritOutputDirs = false
            outputDir = file("${project.buildDir}/classes")
            testOutputDir = file("${project.buildDir}/test-classes")

            generatedSourceDirs += file("${project.buildDir}/generated-sources")
            generatedSourceDirs += file("${project.buildDir}/generated-test-sources")
        }
    }

}


idea {
    project {
        settings {
            runConfigurations {
                "Polypheny-DB"(Application) {
                    mainClass = 'org.polypheny.db.PolyphenyDb'
                    moduleName = getProject().idea.module.name + ".dbms.main"
                }
                "Polypheny-DB (reset)"(Application) {
                    mainClass = 'org.polypheny.db.PolyphenyDb'
                    moduleName = getProject().idea.module.name + ".dbms.main"
                    programParameters = '-resetCatalog'
                }
            }
            copyright {
                useDefault = "ApacheLicense"
                profiles {
                    ApacheLicense {
                        notice = 'Copyright 2019-$today.year The Polypheny Project\n' +
                                '\n' +
                                'Licensed under the Apache License, Version 2.0 (the \"License\");\n' +
                                'you may not use this file except in compliance with the License.\n' +
                                'You may obtain a copy of the License at\n' +
                                '\n' +
                                'http://www.apache.org/licenses/LICENSE-2.0\n' +
                                '\n' +
                                'Unless required by applicable law or agreed to in writing, software\n' +
                                'distributed under the License is distributed on an \"AS IS\" BASIS,\n' +
                                'WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n' +
                                'See the License for the specific language governing permissions and\n' +
                                'limitations under the License.'
                        keyword = "Copyright"
                    }
                }
            }
        }
    }
}
