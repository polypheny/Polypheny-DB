import ca.coglinc.gradle.plugins.javacc.CompileJavaccTask

group "org.polypheny"

configurations {
    javacc
    tests {
        extendsFrom testRuntimeOnly
    }
}


buildscript {
    dependencies {
        classpath group: "gradle.plugin.ca.coglinc2", name: "javacc-gradle-plugin", version: javacc_plugin_version
    }
}


dependencies {
    implementation project(":core")

    javacc group: "net.java.dev.javacc", name: "javacc", version: javacc_version_cypher  // BSD 2-clause
    implementation group: "org.apache.commons", name: "commons-lang3", version: commons_lang3_version  // Apache 2.0
    implementation group: "commons-codec", name: "commons-codec", version: commons_codec_version  // // Apache 2.0
    implementation group: "com.j256.simplemagic", name: "simplemagic", version: simplemagic_version  // ISC

    // --- Test Compile ---
    testImplementation project(path: ":core", configuration: "tests")
    testImplementation group: "junit", name: "junit", version: junit_version
}

task generateParser(type: CompileJavaccTask) {
    getConventionMapping().map("classpath", { configurations.javacc })
    arguments = [static: "false"]
    inputDirectory = file("src/main/codegen")
    outputDirectory = file(project.buildDir.absolutePath + "/generated-sources/org/polypheny/db/cypher/parser")
}


sourceSets {
    main {
        java {
            // srcDirs = ["src/main/java", "build/generated-sources"]
            srcDirs files("${buildDir}/generated-sources").builtBy(generateParser)
            outputDir = file(project.buildDir.absolutePath + "/classes")
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            outputDir = file(project.buildDir.absolutePath + "/test-classes")
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}


compileJava {
    dependsOn("generateParser")
    dependsOn(":config:processResources")
    dependsOn(":core:processResources")
    dependsOn(":information:processResources")
}

delombok {
    dependsOn(":core:processResources")
}


/**
 * JavaDoc
 */
javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
    // suppress most of the warnings
    options.addStringOption("Xdoclint:none", "-quiet")
    // Include private fields in JavaDoc
    options.memberLevel = JavadocMemberLevel.PRIVATE
}


/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Version": "$project.version"
    }
}
java {
    withJavadocJar()
    withSourcesJar()
}
