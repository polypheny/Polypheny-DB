import org.javacc.plugin.gradle.javacc.CompileJavaccTask

group "org.polypheny"

apply plugin: "io.freefair.lombok"
apply plugin: "com.google.protobuf"

configurations {
    javacc
    tests {
        extendsFrom testRuntimeOnly
    }
    testClasses {
        extendsFrom(testImplementation)
    }
}


buildscript {
    dependencies {
        // JavaCC (https://github.com/javacc/javaccPlugin)
        classpath group: "org.javacc.plugin", name: "javacc-gradle-plugin", version: javacc_plugin_version
        // Fmpp
        classpath group: "net.sourceforge.fmpp", name: "fmpp", version: fmpp_plugin_version
        // Protobuf
        classpath group: "com.google.protobuf", name: "protobuf-gradle-plugin", version: protobuf_plugin_version
    }
    ant.taskdef(name: "fmpp", classname: "fmpp.tools.AntTask", classpath: buildscript.configurations.classpath.asPath)
}


dependencies {
    api project(":config")
    api project(":information")

    javacc group: "net.java.dev.javacc", name: "javacc", version: javacc_version  // BSD 2-clause

    implementation(group: 'org.pf4j', name: 'pf4j', version: pf4j_version) {
        exclude group: "org.slf4j"
    }
    implementation group: 'commons-codec', name: 'commons-codec', version: commons_codec_version  // Apache 2.0
    api group: "org.apache.commons", name: "commons-lang3", version: commons_lang3_version  // Apache 2.0
    api group: "org.apache.commons", name: "commons-dbcp2", version: commons_dbcp2_version  // Apache 2.0

    api group: "com.google.guava", name: "guava", version: guava_version
    api(group: "org.reflections", name: "reflections", version: reflections_version) // BSD 2-clause
    api group: "com.google.code.gson", name: "gson", version: gson_version  // Apache 2.0
    implementation group: "com.esri.geometry", name: "esri-geometry-api", version: esri_geometry_api_version  // Apache 2.0
    api group: "com.fasterxml.jackson.core", name: "jackson-core", version: jackson_core_version  // Apache 2.0
    api group: "com.fasterxml.jackson.core", name: "jackson-databind", version: jackson_databind_version  // Apache 2.0
    api group: "com.google.code.findbugs", name: "jsr305", version: jsr305_version  // Apache 2.0
    implementation(group: "com.jayway.jsonpath", name: "json-path", version: json_path_version) { exclude(module: "json-smart"); exclude(group: "org.slf4j") }  // Apache 2.0
    implementation group: "org.codehaus.janino", name: "janino", version: janino_version  // BSD
    implementation group: "org.codehaus.janino", name: "commons-compiler", version: commons_compiler_version  // BSD
    implementation group: 'com.j256.simplemagic', name: 'simplemagic', version: simplemagic_version // ISC

    api(group: "org.apache.calcite", name: "calcite-linq4j", version: calcite_linq4j_version) { exclude(module: "guava") } // Apache 2.0
    api(group: "org.polypheny.avatica", name: "avatica-core", version: avatica_core_version) { exclude(module: "protobuf-java") } // Apache 2.0

    implementation group: "com.drewnoakes", name: "metadata-extractor", version: metadata_extractor_version // Apache 2.0

    implementation group: "org.mongodb", name: "mongodb-driver-sync", version: mongodb_driver_sync_version  // Apache 2.0

    // For Docker integration
    implementation group: "org.bouncycastle", name: "bcprov-jdk18on", version: bouncycastle_version // MIT
    implementation group: "org.bouncycastle", name: "bctls-jdk18on", version: bouncycastle_version // MIT
    implementation group: "org.bouncycastle", name: "bcpkix-jdk18on", version: bouncycastle_version // MIT
    implementation group: "com.google.protobuf", name: "protobuf-java", version: protobuf_version // BSD 3-clause
    implementation group: "com.github.docker-java", name: "docker-java", version: java_docker_version // Apache 2.0
    implementation group: "com.github.docker-java", name: "docker-java-transport-httpclient5", version: java_docker_version // TODO: should probably be independent version in future

    // uses config internally...
    implementation(group: "com.datastax.oss", name: "java-driver-core", version: cassandra_driver_core_version) { // Apache 2.0
        exclude group: "com.github.spotbugs"
    }

    // --- Test Compile ---
    testImplementation group: "junit", name: "junit", version: junit_version
    testImplementation group: "org.hamcrest", name: "hamcrest-core", version: hamcrest_core_version  // BSD 3-clause
}


protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobuf_version"
    }
}


sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "build/generated-sources", "build/generated/source/proto/main/java"]
            outputDir = file(project.buildDir.absolutePath + "/classes")
        }
        resources {
            srcDirs = ["src/main/resources"]
            exclude "version/*.properties"
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            outputDir = file(project.buildDir.absolutePath + "/test-classes")
        }
        resources {
            // We need the main resources for the tests as well.
            srcDirs = ["src/test/resources", "src/main/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}

/**
 * Additional MongoDB query language Compile Pipeline
 */
task generateFmppSourcesDocument {
    inputs.dir("src/main/codegen/templates/mql")
    outputs.dir(project.buildDir.absolutePath + "/generated-sources/fmpp")
    doLast {
        ant.fmpp(configuration: "src/main/codegen/config_doc.fmpp",
                sourceRoot: "src/main/codegen/templates/mql",
                outputRoot: project.buildDir.absolutePath + "/generated-sources/fmpp/mql")
    }
}
task generateParserDocument(type: CompileJavaccTask) {
    dependsOn("generateFmppSourcesDocument")
    getConventionMapping().map("classpath", { configurations.javacc })
    arguments = [static: "false", lookahead: "2"]
    inputDirectory = file(project.buildDir.absolutePath + "/generated-sources/fmpp/mql/javacc")
    outputDirectory = file(project.buildDir.absolutePath + "/generated-sources/org/polypheny/db/mql/parser/impl")
}

/**
 * Compile Pipeline
 */
task generateFmppSources {
    inputs.dir("src/main/codegen/templates/sql")
    outputs.dir(project.buildDir.absolutePath + "/generated-sources/fmpp")
    doLast {
        ant.fmpp(configuration: "src/main/codegen/config.fmpp",
                sourceRoot: "src/main/codegen/templates/sql",
                outputRoot: project.buildDir.absolutePath + "/generated-sources/fmpp/sql")
    }
}
task generateParser(type: CompileJavaccTask) {
    dependsOn("generateFmppSources")
    getConventionMapping().map("classpath", { configurations.javacc })
    arguments = [static: "false", lookahead: "2"]
    inputDirectory = file(project.buildDir.absolutePath + "/generated-sources/fmpp/sql/javacc")
    outputDirectory = file(project.buildDir.absolutePath + "/generated-sources/org/polypheny/db/sql/parser/impl")
}
task generateJdbcVersionProperties(type: Copy) {
    from "src/main/resources/version"
    into project.buildDir.absolutePath + "/classes"
    expand(version: project.version, versionMajor: versionMajor, versionMinor: versionMinor, buildTimestamp: new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"))
}
compileJava {
    dependsOn("generateJdbcVersionProperties")
    dependsOn(":config:processResources")
    dependsOn(":information:processResources")
    dependsOn("generateProto")
}

delombok {
    dependsOn(":config:processResources")
    dependsOn(":information:processResources")
    dependsOn("generateProto")
}

extractIncludeProto {
    dependsOn(":config:compileJava")
    dependsOn(":information:compileJava")
}


/**
 * JavaDoc
 */
javadoc {
    // suppress most of the warnings
    options.addStringOption("Xdoclint:none", "-quiet")
    // Include private fields in JavaDoc
    options.memberLevel = JavadocMemberLevel.PRIVATE
    // Use HTML 5 for JavaDoc
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
    // Exclude build dir
    exclude "fmpp/sql/javacc/**"
    exclude "fmpp/mql/javacc/**"
}



/**
 * Tests
 */
test {
    maxHeapSize = "2g" // Increase heap size (default is 512MB)
    useJUnit {
        excludeCategories 'org.polypheny.db.AdapterTestSuite'
    }
}


/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Version": "$project.version"
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}
task testJar(type: Jar, dependsOn: testClasses) {
    classifier 'tests'
    from sourceSets.test.output
}
artifacts {
    //archives jar // regular jar containing only the compiled source
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files
    tests testJar // jar file containing the test classes
}
