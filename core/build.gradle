buildscript {
    dependencies {
        // Protobuf
        classpath group: "com.google.protobuf", name: "protobuf-gradle-plugin", version: protobuf_plugin_version
    }
}

group "org.polypheny"


apply plugin: "io.freefair.lombok"
apply plugin: "com.google.protobuf"


configurations {
    //javacc
    tests {
        extendsFrom testRuntimeOnly
    }
    testClasses {
        extendsFrom testImplementation
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}


dependencies {
    api project(":config")
    api project(":information")

    implementation group: "org.pf4j", name: "pf4j", version: pf4j_version
    implementation group: "commons-codec", name: "commons-codec", version: commons_codec_version  // Apache 2.0
    api group: "org.apache.commons", name: "commons-lang3", version: commons_lang3_version  // Apache 2.0

    api group: "com.google.guava", name: "guava", version: guava_version
    api group: "com.google.code.gson", name: "gson", version: gson_version  // Apache 2.0
    implementation group: "com.esri.geometry", name: "esri-geometry-api", version: esri_geometry_api_version  // Apache 2.0
    api group: "com.fasterxml.jackson.core", name: "jackson-core", version: jackson_core_version  // Apache 2.0
    api group: "com.fasterxml.jackson.core", name: "jackson-databind", version: jackson_databind_version  // Apache 2.0
    api group: "com.google.code.findbugs", name: "jsr305", version: jsr305_version  // Apache 2.0
    implementation group: "com.jayway.jsonpath", name: "json-path", version: json_path_version // Apache 2.0
    implementation group: "org.codehaus.janino", name: "janino", version: janino_version  // BSD
    implementation group: "org.codehaus.janino", name: "commons-compiler", version: commons_compiler_version  // BSD
    implementation group: "com.j256.simplemagic", name: "simplemagic", version: simplemagic_version // ISC

    api(group: "org.apache.calcite", name: "calcite-linq4j", version: calcite_linq4j_version) {
        exclude(module: "guava")
    } // Apache 2.0

    implementation group: "com.drewnoakes", name: "metadata-extractor", version: metadata_extractor_version // Apache 2.0

    implementation group: "org.mongodb", name: "mongodb-driver-sync", version: mongodb_driver_sync_version  // Apache 2.0

    // For Docker integration
    implementation group: "org.bouncycastle", name: "bcprov-jdk18on", version: bouncycastle_version // MIT
    implementation group: "org.bouncycastle", name: "bctls-jdk18on", version: bouncycastle_version // MIT
    implementation group: "org.bouncycastle", name: "bcpkix-jdk18on", version: bouncycastle_version // MIT
    implementation group: "com.google.protobuf", name: "protobuf-java", version: protobuf_version // BSD 3-clause
    implementation group: "com.github.docker-java", name: "docker-java", version: java_docker_version // Apache 2.0
    implementation group: "com.github.docker-java", name: "docker-java-transport-httpclient5", version: java_docker_version // TODO: should probably be independent version in future

    api group: "io.activej", name: "activej-serializer", version: activej_serializer_version

    // GIS
    api group: "org.locationtech.jts", name: "jts-core", version: jts_version // Eclipse Public License 2.0 && Eclipse Distribution License 1.0 (BSD-3 Clause)
    api group: "org.locationtech.jts.io", name: "jts-io-common", version: jts_version // Eclipse Public License 2.0 && Eclipse Distribution License 1.0 (BSD-3 Clause)
    api group: "org.locationtech.proj4j", name: "proj4j", version: proj4j_version // Apache 2.0
    api group: "org.locationtech.proj4j", name: "proj4j-epsg", version: proj4j_version // Apache 2.0

    // --- Test Compile ---
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: junit_jupiter_version
    testRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit_jupiter_version)
    testImplementation group: "org.hamcrest", name: "hamcrest-core", version: hamcrest_core_version  // BSD 3-clause
}


protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobuf_version"
    }
}


sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "build/generated/source/proto/main/java"] //  "build/generated/sources/annotationProcessor"
        }
        resources {
            srcDirs = ["src/main/resources"]
            exclude "version/*.properties"
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            destinationDirectory.set(file(project.buildDir.absolutePath + "/test-classes"))
        }
        resources {
            // We need the main resources for the tests as well.
            srcDirs = ["src/test/resources", "src/main/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}


tasks.register('generateVersionProperties', Copy) {
    from "src/main/resources/version"
    into project.buildDir.absolutePath + "/classes"
    expand(version: project.version, versionMajor: versionMajor, versionMinor: versionMinor, buildTimestamp: new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"))
}

compileJava {
    dependsOn("generateVersionProperties")
    dependsOn(":config:processResources")
    dependsOn(":information:processResources")
    dependsOn("generateProto")
}

delombok {
    dependsOn(":config:processResources")
    dependsOn(":information:processResources")
    dependsOn("generateProto")
}

extractIncludeProto {
    dependsOn(":config:compileJava")
    dependsOn(":information:compileJava")
}


/**
 * JavaDoc
 */
javadoc {
    // suppress most of the warnings
    options.addStringOption("Xdoclint:none", "-quiet")
    // Include private fields in JavaDoc
    options.memberLevel = JavadocMemberLevel.PRIVATE
    // Use HTML 5 for JavaDoc
    options.addBooleanOption("html5", true)
}


/**
 * Tests
 */
test {
    maxHeapSize = "2g" // Increase heap size (default is 512MB)
    useJUnitPlatform() // Use JUnit 5
}


/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Version": "$project.version"
    }
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
}

tasks.register('testJar', Jar) {
    dependsOn testClasses
    archiveClassifier = "tests"
    from sourceSets.test.output
}

artifacts {
    //archives jar // regular jar containing only the compiled source
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files
    tests testJar // jar file containing the test classes
}
