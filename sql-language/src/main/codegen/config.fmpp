# This file is an FMPP (http://fmpp.sourceforge.net/) configuration file to allow clients to extend Polypheny-DB's SQL parser to support application specific
# SQL statements, literals or data types.
#
# Polypheny-DB's parser grammar file (Parser.jj) is written in javacc (http://javacc.java.net/) with Freemarker (http://freemarker.org/) variables
# to allow clients to:
#   1. have custom parser implementation class and package name.
#   2. insert new parser method implementations written in javacc to parse custom:
#      a) SQL statements.
#      b) literals.
#      c) data types.
#   3. add new keywords to support custom SQL constructs added as part of (2).
#   4. add import statements needed by inserted custom parser implementations.
#
# Parser template file (Parser.jj) along with this file are packaged as part of the polyphenydb-core-<version>.jar under "codegen" directory.

data: {
    parser: {
        # Generated parser implementation package and class name.
        package: "org.polypheny.db.languages.sql.parser.impl",
        class: "SqlParserImpl",

        # List of additional classes and packages to import.
        # Example. "org.polypheny.db.sql.*", "java.util.List".
        imports: [
            "org.polypheny.db.schema.ColumnStrategy"
            "org.polypheny.db.sql.language.SqlAlter"
            "org.polypheny.db.sql.language.SqlBasicCall"
            "org.polypheny.db.sql.language.SqlBinaryOperator"
            "org.polypheny.db.sql.language.SqlCall"
            "org.polypheny.db.sql.language.SqlCharStringLiteral"
            "org.polypheny.db.sql.language.SqlCollation"
            "org.polypheny.db.sql.language.SqlCreate"
            "org.polypheny.db.sql.language.SqlDataTypeSpec"
            "org.polypheny.db.sql.language.SqlDelete"
            "org.polypheny.db.sql.language.SqlDescribeSchema"
            "org.polypheny.db.sql.language.SqlDescribeTable"
            "org.polypheny.db.sql.language.SqlDrop"
            "org.polypheny.db.sql.language.SqlDynamicParam"
            "org.polypheny.db.sql.language.SqlExplain"
            "org.polypheny.db.sql.language.SqlIdentifier"
            "org.polypheny.db.sql.language.SqlInsert"
            "org.polypheny.db.sql.language.SqlInsertKeyword"
            "org.polypheny.db.sql.language.SqlIntervalQualifier"
            "org.polypheny.db.sql.language.SqlJdbcDataTypeName"
            "org.polypheny.db.sql.language.SqlJdbcFunctionCall"
            "org.polypheny.db.sql.language.SqlJoin"
            "org.polypheny.db.sql.language.SqlLiteral"
            "org.polypheny.db.sql.language.SqlMatchRecognize"
            "org.polypheny.db.sql.language.SqlMerge"
            "org.polypheny.db.sql.language.SqlNode"
            "org.polypheny.db.sql.language.SqlNodeList"
            "org.polypheny.db.sql.language.SqlNumericLiteral"
            "org.polypheny.db.sql.language.SqlOperator"
            "org.polypheny.db.sql.language.SqlOrderBy"
            "org.polypheny.db.sql.language.SqlPostfixOperator"
            "org.polypheny.db.sql.language.SqlPrefixOperator"
            "org.polypheny.db.sql.language.SqlSampleSpec"
            "org.polypheny.db.sql.language.SqlSelect"
            "org.polypheny.db.sql.language.SqlSelectKeyword"
            "org.polypheny.db.sql.language.SqlSetOption"
            "org.polypheny.db.sql.language.SqlUnnestOperator"
            "org.polypheny.db.sql.language.SqlUpdate"
            "org.polypheny.db.sql.language.SqlUtil"
            "org.polypheny.db.sql.language.SqlWindow"
            "org.polypheny.db.sql.language.SqlWith"
            "org.polypheny.db.sql.language.SqlWithItem"
            "org.polypheny.db.sql.language.ddl.SqlAlterAdaptersAdd"
            "org.polypheny.db.sql.language.ddl.SqlAlterAdaptersDrop"
            "org.polypheny.db.sql.language.ddl.SqlAlterConfig"
            "org.polypheny.db.sql.language.ddl.SqlAlterInterfacesAdd"
            "org.polypheny.db.sql.language.ddl.SqlAlterInterfacesDrop"
            "org.polypheny.db.sql.language.ddl.SqlAlterMaterializedView"
            "org.polypheny.db.sql.language.ddl.SqlAlterSchema"
            "org.polypheny.db.sql.language.ddl.SqlAlterTable"
            "org.polypheny.db.sql.language.ddl.SqlAlterView"
            "org.polypheny.db.sql.language.ddl.SqlDdlNodes"
            "org.polypheny.db.sql.language.ddl.SqlTruncate"
            "org.polypheny.db.sql.language.ddl.altermaterializedview.SqlAlterMaterializedViewAddIndex"
            "org.polypheny.db.sql.language.ddl.altermaterializedview.SqlAlterMaterializedViewDropIndex"
            "org.polypheny.db.sql.language.ddl.altermaterializedview.SqlAlterMaterializedViewFreshnessManual"
            "org.polypheny.db.sql.language.ddl.altermaterializedview.SqlAlterMaterializedViewRename"
            "org.polypheny.db.sql.language.ddl.altermaterializedview.SqlAlterMaterializedViewRenameColumn"
            "org.polypheny.db.sql.language.ddl.alterschema.SqlAlterSchemaOwner"
            "org.polypheny.db.sql.language.ddl.alterschema.SqlAlterSchemaRename"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterSourceTableAddColumn"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableAddColumn"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableAddForeignKey"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableAddIndex"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableAddPartitions"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableAddPlacement"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableAddPrimaryKey"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableAddUniqueConstraint"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableDropColumn"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableDropConstraint"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableDropForeignKey"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableDropIndex"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableDropPlacement"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableDropPrimaryKey"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableMergePartitions"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableModifyColumn"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableModifyPartitions"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableModifyPlacement"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableModifyPlacementAddColumn"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableModifyPlacementDropColumn"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableOwner"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableRename"
            "org.polypheny.db.sql.language.ddl.altertable.SqlAlterTableRenameColumn"
            "org.polypheny.db.sql.language.ddl.alterview.SqlAlterViewRename"
            "org.polypheny.db.sql.language.ddl.alterview.SqlAlterViewRenameColumn"
            "org.polypheny.db.sql.language.fun.OracleSqlOperatorTable"
            "org.polypheny.db.sql.language.fun.SqlArrayValueConstructor"
            "org.polypheny.db.sql.language.fun.SqlCase"
            "org.polypheny.db.sql.language.fun.SqlJsonArrayAggAggFunction"
            "org.polypheny.db.sql.language.fun.SqlJsonObjectAggAggFunction"
            "org.polypheny.db.sql.language.fun.SqlStdOperatorTable"
            "org.polypheny.db.sql.language.fun.SqlTrimFunction"
            "org.polypheny.db.sql.language.parser.Span"
            "org.polypheny.db.sql.language.parser.SqlAbstractParserImpl"
            "org.polypheny.db.sql.language.parser.SqlAbstractParserImpl.ExprContext"
            "org.polypheny.db.sql.language.parser.SqlAbstractParserImpl.MetadataImpl"
            "org.polypheny.db.sql.language.parser.SqlParser"
            "org.polypheny.db.sql.language.parser.SqlParserUtil"
            "java.util.Map"
            "java.util.HashMap"
        ]

        # List of new keywords. Example: "DATABASES", "TABLES". If the keyword is not a reserved keyword add it to 'nonReservedKeywords' section.
        keywords: [
            "IF"
            "STORED"
            "VIRTUAL"
            "JAR"
            "FILE"
            "ARCHIVE"
        ]

        # List of keywords from "keywords" section that are not reserved.
        nonReservedKeywords: [
            "A"
            "ABSENT"
            "ABSOLUTE"
            "ACTION"
            "ADA"
            "ADAPTERS"
            "ADD"
            "ADMIN"
            "AFTER"
            "ALWAYS"
            "APPLY"
            "ASC"
            "ASSERTION"
            "ASSIGNMENT"
            "ATTRIBUTE"
            "ATTRIBUTES"
            "BEFORE"
            "BERNOULLI"
            "BREADTH"
            "C"
            "CASCADE"
            "CATALOG"
            "CATALOG_NAME"
            "CENTURY"
            "CONFIG"
            "CHAIN"
            "CHARACTER_SET_CATALOG"
            "CHARACTER_SET_NAME"
            "CHARACTER_SET_SCHEMA"
            "CHARACTERISTICS"
            "CHARACTERS"
            "CLASS_ORIGIN"
            "COBOL"
            "COLLATION"
            "COLLATION_CATALOG"
            "COLLATION_NAME"
            "COLLATION_SCHEMA"
            "COLUMN_NAME"
            "COMMAND_FUNCTION"
            "COMMAND_FUNCTION_CODE"
            "COMMITTED"
            "CONDITION_NUMBER"
            "CONDITIONAL"
            "CONNECTION"
            "CONNECTION_NAME"
            "CONSTRAINT_CATALOG"
            "CONSTRAINT_NAME"
            "CONSTRAINT_SCHEMA"
            "CONSTRAINTS"
            "CONSTRUCTOR"
            "CONTINUE"
            "CURSOR_NAME"
            "DATA"
            "DATABASE"
            "DATETIME_INTERVAL_CODE"
            "DATETIME_INTERVAL_PRECISION"
            "DECADE"
            "DEFAULTS"
            "DEFERRABLE"
            "DEFERRED"
            "DEFINED"
            "DEFINER"
            "DEGREE"
            "DEPTH"
            "DERIVED"
            "DESC"
            "DESCRIPTION"
            "DESCRIPTOR"
            "DIAGNOSTICS"
            "DISPATCH"
            "DOMAIN"
            "DOW"
            "DOY"
            "DYNAMIC_FUNCTION"
            "DYNAMIC_FUNCTION_CODE"
            "ENCODING"
            "EPOCH"
            "ERROR"
            "EXCEPTION"
            "EXCLUDE"
            "EXCLUDING"
            "FINAL"
            "FIRST"
            "FOLLOWING"
            "FORMAT"
            "FORTRAN"
            "FOUND"
            "FRAC_SECOND"
            "G"
            "GENERAL"
            "GENERATED"
            "GEOMETRY"
            "GO"
            "GOTO"
            "GRANTED"
            "HIERARCHY"
            "IMMEDIATE"
            "IMMEDIATELY"
            "IMPLEMENTATION"
            "INCLUDING"
            "INCREMENT"
            "INDEX"
            "INITIALLY"
            "INPUT"
            "INSTANCE"
            "INSTANTIABLE"
            "INTERFACES"
            "INVOKER"
            "ISODOW"
            "ISOYEAR"
            "ISOLATION"
            "JAVA"
            "JSON"
            "K"
            "KEY"
            "KEY_MEMBER"
            "KEY_TYPE"
            "LABEL"
            "LAST"
            "LENGTH"
            "LEVEL"
            "LIBRARY"
            "LOCATOR"
            "M"
            "MAP"
            "MATCHED"
            "MATERIALIZED"
            "MAXVALUE"
            "MICROSECOND"
            "MESSAGE_LENGTH"
            "MESSAGE_OCTET_LENGTH"
            "MESSAGE_TEXT"
            "META"
            "MILLISECOND"
            "MILLENNIUM"
            "MINVALUE"
            "MODIFY"
            "MORE_"
            "MUMPS"
            "NAME"
            "NAMES"
            "NANOSECOND"
            "NESTING"
            "NORMALIZED"
            "NULLABLE"
            "NULLS"
            "NUMBER"
            "OBJECT"
            "OCTETS"
            "OPTION"
            "OPTIONS"
            "ORDERING"
            "ORDINALITY"
            "OTHERS"
            "OUTPUT"
            "OVERRIDING"
            "OWNER"
            "PAD"
            "PARAMETER_MODE"
            "PARAMETER_NAME"
            "PARAMETER_ORDINAL_POSITION"
            "PARAMETER_SPECIFIC_CATALOG"
            "PARAMETER_SPECIFIC_NAME"
            "PARAMETER_SPECIFIC_SCHEMA"
            "PARTIAL"
            "PASCAL"
            "PASSING"
            "PASSTHROUGH"
            "PAST"
            "PATH"
            "PLACEMENT"
            "PLACING"
            "PLAN"
            "PLI"
            "PRECEDING"
            "PRESERVE"
            "PRIOR"
            "PRIVILEGES"
            "PUBLIC"
            "QUARTER"
            "READ"
            "RELATIVE"
            "RENAME"
            "REPEATABLE"
            "REPLACE"
            "RESTART"
            "RESTRICT"
            "RETURNED_CARDINALITY"
            "RETURNED_LENGTH"
            "RETURNED_OCTET_LENGTH"
            "RETURNED_SQLSTATE"
            "RETURNING"
            "ROLE"
            "ROUTINE"
            "ROUTINE_CATALOG"
            "ROUTINE_NAME"
            "ROUTINE_SCHEMA"
            "ROW_COUNT"
            "SCALAR"
            "SCALE"
            "SCHEMA"
            "SCHEMA_NAME"
            "SCOPE_CATALOGS"
            "SCOPE_NAME"
            "SCOPE_SCHEMA"
            "SECTION"
            "SECURITY"
            "SELF"
            "SEQUENCE"
            "SERIALIZABLE"
            "SERVER"
            "SERVER_NAME"
            "SESSION"
            "SETS"
            "SIMPLE"
            "SIZE"
            "SOURCE"
            "SPACE"
            "SPECIFIC_NAME"
            "SQL_BIGINT"
            "SQL_BINARY"
            "SQL_BIT"
            "SQL_BLOB"
            "SQL_BOOLEAN"
            "SQL_CHAR"
            "SQL_CLOB"
            "SQL_DATE"
            "SQL_DECIMAL"
            "SQL_DOUBLE"
            "SQL_FLOAT"
            "SQL_JSON"
            "SQL_INTEGER"
            "SQL_INTERVAL_DAY"
            "SQL_INTERVAL_DAY_TO_HOUR"
            "SQL_INTERVAL_DAY_TO_MINUTE"
            "SQL_INTERVAL_DAY_TO_SECOND"
            "SQL_INTERVAL_HOUR"
            "SQL_INTERVAL_HOUR_TO_MINUTE"
            "SQL_INTERVAL_HOUR_TO_SECOND"
            "SQL_INTERVAL_MINUTE"
            "SQL_INTERVAL_MINUTE_TO_SECOND"
            "SQL_INTERVAL_MONTH"
            "SQL_INTERVAL_SECOND"
            "SQL_INTERVAL_YEAR"
            "SQL_INTERVAL_YEAR_TO_MONTH"
            "SQL_LONGVARBINARY"
            "SQL_LONGVARNCHAR"
            "SQL_LONGVARCHAR"
            "SQL_NCHAR"
            "SQL_NCLOB"
            "SQL_NUMERIC"
            "SQL_NVARCHAR"
            "SQL_REAL"
            "SQL_SMALLINT"
            "SQL_TIME"
            "SQL_TIMESTAMP"
            "SQL_TINYINT"
            "SQL_TSI_DAY"
            "SQL_TSI_FRAC_SECOND"
            "SQL_TSI_HOUR"
            "SQL_TSI_MICROSECOND"
            "SQL_TSI_MINUTE"
            "SQL_TSI_MONTH"
            "SQL_TSI_QUARTER"
            "SQL_TSI_SECOND"
            "SQL_TSI_WEEK"
            "SQL_TSI_YEAR"
            "SQL_VARBINARY"
            "SQL_VARCHAR"
            "STORE"
            "STATE"
            "STATEMENT"
            "STRUCTURE"
            "STYLE"
            "SUBCLASS_ORIGIN"
            "SUBSTITUTE"
            "TABLE_NAME"
            "TEMPORARY"
            "TIES"
            "TIMESTAMPADD"
            "TIMESTAMPDIFF"
            "TOP_LEVEL_COUNT"
            "TRANSACTION"
            "TRANSACTIONS_ACTIVE"
            "TRANSACTIONS_COMMITTED"
            "TRANSACTIONS_ROLLED_BACK"
            "TRANSFORM"
            "TRANSFORMS"
            "TRIGGER_CATALOG"
            "TRIGGER_NAME"
            "TRIGGER_SCHEMA"
            "TYPE"
            "UNBOUNDED"
            "UNCOMMITTED"
            "UNCONDITIONAL"
            "UNDER"
            "UNNAMED"
            "USAGE"
            "USER_DEFINED_TYPE_CATALOG"
            "USER_DEFINED_TYPE_CODE"
            "USER_DEFINED_TYPE_NAME"
            "USER_DEFINED_TYPE_SCHEMA"
            "UTF8"
            "UTF16"
            "UTF32"
            "VERSION"
            "VIEW"
            "WEEK"
            "WRAPPER"
            "WORK"
            "WRITE"
            "XML"
            "ZONE"
        ]

        # List of additional join types. Each is a method with no arguments.
        # Example: LeftSemiJoin()
        joinTypes: [
        ]

        # List of methods for parsing custom SQL statements. Return type of method implementation should be 'SqlNode'.
        # Example: SqlShowDatabases(), SqlShowTables().
        statementParserMethods: [
            "SqlTruncateTable()"
        ]

        # List of methods for parsing custom literals. Return type of method implementation should be "SqlNode".
        # Example: ParseJsonLiteral().
        literalParserMethods: [
        ]

        # List of methods for parsing custom data types. Return type of method implementation should be "SqlIdentifier".
        # Example: SqlParseTimeStampZ().
        dataTypeParserMethods: [
        ]

        # List of methods for parsing extensions to "ALTER" calls. Each must accept arguments "(SqlParserPos pos)".
        # Example: "SqlUploadJarNode"
        alterStatementParserMethods: [
            "SqlSetOption"
            "SqlAlterSchema"
            "SqlAlterView"
            "SqlAlterMaterializedView"
            "SqlAlterTable"
            "SqlAlterConfig"
            "SqlAlterAdaptersAdd"
            "SqlAlterAdaptersDrop"
            "SqlAlterInterfacesAdd"
            "SqlAlterInterfacesDrop"
        ]

        # List of methods for parsing extensions to "CREATE [OR REPLACE]" calls. Each must accept arguments "(SqlParserPos pos, boolean replace)".
        createStatementParserMethods: [
            "SqlCreateSchema"
            "SqlCreateTable"
            "SqlCreateType"
            "SqlCreateView"
            "SqlCreateMaterializedView"
            "SqlCreateFunction"
        ]

        # List of methods for parsing extensions to "DROP" calls. Each must accept arguments "(SqlParserPos pos)".
        dropStatementParserMethods: [
            "SqlDropSchema"
            "SqlDropTable"
            "SqlDropType"
            "SqlDropView"
            "SqlDropMaterializedView"
            "SqlDropFunction"
        ]

        # List of files in @includes directory that have parser method implementations for parsing custom SQL statements, literals or types
        # given as part of "statementParserMethods", "literalParserMethods" or "dataTypeParserMethods".
        implementationFiles: [
            "parserImpls.ftl"
            "ddlParser.ftl"
        ]

        includeCompoundIdentifier: true
        includeBraces: true
        includeAdditionalDeclarations: false
    }
}

freemarkerLinks: {
    includes: includes/
}

